(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{0:function(l,t,e){l.exports=e("kpGR")},"3UD+":function(module,exports){eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiM1VEKy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcz84MmIwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3UD+\n")},"9tPo":function(module,exports){eval("\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOXRQby5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanM/ZjZkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9tPo\n")},BF7s:function(module,exports){eval("module.exports = \"data:font/woff2;base64,\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///BF7s\n")},JPst:function(module,exports,__webpack_require__){"use strict";eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return '@media ' + item[2] + '{' + content + '}';\n      } else {\n        return content;\n      }\n    }).join('');\n  }; // import a list of modules into the list\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === 'string') {\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (i = 0; i < modules.length; i++) {\n      var item = modules[i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || '';\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n  return '/*# ' + data + ' */';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSlBzdC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanM/MjRmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gJ0BtZWRpYSAnICsgaXRlbVsyXSArICd7JyArIGNvbnRlbnQgKyAnfSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tpXTsgLy8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuICAgICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcbiAgICAgIC8vIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cbiAgICAgIC8vIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblxuICAgICAgaWYgKGl0ZW1bMF0gPT0gbnVsbCB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBpZiAobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICBpdGVtWzJdID0gJygnICsgaXRlbVsyXSArICcpIGFuZCAoJyArIG1lZGlhUXVlcnkgKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLyc7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG4gIHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///JPst\n")},Li5z:function(module,exports){eval("module.exports = \"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nuniform float time;\\n\\nvoid main () {\\n\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1 );\\n\\n}\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGk1ei5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9qcy9zaGFkZXJzL2RlZmF1bHQudmVydD9iNzQwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCIjZGVmaW5lIEdMU0xJRlkgMVxcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudW5pZm9ybSBmbG9hdCB0aW1lO1xcblxcbnZvaWQgbWFpbiAoKSB7XFxuXFxuICAgIHZVdiA9IHV2O1xcbiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMSApO1xcblxcbn1cIiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///Li5z\n")},P3Nu:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * Konami-JS ~\n * :: Now with support for touch events and multiple instances for\n * :: those situations that call for multiple easter eggs!\n * Code: https://github.com/snaptortoise/konami-js\n * Copyright (c) 2009 George Mandis (georgemandis.com, snaptortoise.com)\n * Version: 1.6.2 (7/17/2018)\n * Licensed under the MIT License (http://opensource.org/licenses/MIT)\n * Tested in: Safari 4+, Google Chrome 4+, Firefox 3+, IE7+, Mobile Safari 2.2.1+ and Android\n */\n\nvar Konami = function (callback) {\n    var konami = {\n        addEvent: function (obj, type, fn, ref_obj) {\n            if (obj.addEventListener)\n                obj.addEventListener(type, fn, false);\n            else if (obj.attachEvent) {\n                // IE\n                obj[\"e\" + type + fn] = fn;\n                obj[type + fn] = function () {\n                    obj[\"e\" + type + fn](window.event, ref_obj);\n                }\n                obj.attachEvent(\"on\" + type, obj[type + fn]);\n            }\n        },\n        removeEvent: function (obj, eventName, eventCallback) {\n            if (obj.removeEventListener) {\n                obj.removeEventListener(eventName, eventCallback);\n            } else if (obj.attachEvent) {\n                obj.detachEvent(eventName);\n            }\n        },\n        input: \"\",\n        pattern: \"38384040373937396665\",\n        keydownHandler: function (e, ref_obj) {\n            if (ref_obj) {\n                konami = ref_obj;\n            } // IE\n            konami.input += e ? e.keyCode : event.keyCode;\n            if (konami.input.length > konami.pattern.length) {\n                konami.input = konami.input.substr((konami.input.length - konami.pattern.length));\n            }\n            if (konami.input === konami.pattern) {\n                konami.code(konami._currentLink);\n                konami.input = '';\n                e.preventDefault();\n                return false;\n            }\n        },\n        load: function (link) {\n            this._currentLink = link;\n            this.addEvent(document, \"keydown\", this.keydownHandler, this);\n            this.iphone.load(link);\n        },\n        unload: function () {\n            this.removeEvent(document, 'keydown', this.keydownHandler);\n            this.iphone.unload();\n        },\n        code: function (link) {\n            window.location = link\n        },\n        iphone: {\n            start_x: 0,\n            start_y: 0,\n            stop_x: 0,\n            stop_y: 0,\n            tap: false,\n            capture: false,\n            orig_keys: \"\",\n            keys: [\"UP\", \"UP\", \"DOWN\", \"DOWN\", \"LEFT\", \"RIGHT\", \"LEFT\", \"RIGHT\", \"TAP\", \"TAP\"],\n            input: [],\n            code: function (link) {\n                konami.code(link);\n            },\n            touchmoveHandler: function (e) {\n                if (e.touches.length === 1 && konami.iphone.capture === true) {\n                    var touch = e.touches[0];\n                    konami.iphone.stop_x = touch.pageX;\n                    konami.iphone.stop_y = touch.pageY;\n                    konami.iphone.tap = false;\n                    konami.iphone.capture = false;\n                    konami.iphone.check_direction();\n                }\n            },\n            touchendHandler: function () {\n                konami.iphone.input.push(konami.iphone.check_direction());\n                \n                if (konami.iphone.input.length > konami.iphone.keys.length) konami.iphone.input.shift();\n                \n                if (konami.iphone.input.length === konami.iphone.keys.length) {\n                    var match = true;\n                    for (var i = 0; i < konami.iphone.keys.length; i++) {\n                        if (konami.iphone.input[i] !== konami.iphone.keys[i]) {\n                            match = false;\n                        }\n                    }\n                    if (match) {\n                        konami.iphone.code(konami._currentLink);\n                    }\n                }\n            },\n            touchstartHandler: function (e) {\n                konami.iphone.start_x = e.changedTouches[0].pageX;\n                konami.iphone.start_y = e.changedTouches[0].pageY;\n                konami.iphone.tap = true;\n                konami.iphone.capture = true;\n            },\n            load: function (link) {\n                this.orig_keys = this.keys;\n                konami.addEvent(document, \"touchmove\", this.touchmoveHandler);\n                konami.addEvent(document, \"touchend\", this.touchendHandler, false);\n                konami.addEvent(document, \"touchstart\", this.touchstartHandler);\n            },\n            unload: function () {\n                konami.removeEvent(document, 'touchmove', this.touchmoveHandler);\n                konami.removeEvent(document, 'touchend', this.touchendHandler);\n                konami.removeEvent(document, 'touchstart', this.touchstartHandler);\n            },\n            check_direction: function () {\n                x_magnitude = Math.abs(this.start_x - this.stop_x);\n                y_magnitude = Math.abs(this.start_y - this.stop_y);\n                x = ((this.start_x - this.stop_x) < 0) ? \"RIGHT\" : \"LEFT\";\n                y = ((this.start_y - this.stop_y) < 0) ? \"DOWN\" : \"UP\";\n                result = (x_magnitude > y_magnitude) ? x : y;\n                result = (this.tap === true) ? \"TAP\" : result;\n                return result;\n            }\n        }\n    }\n\n    typeof callback === \"string\" && konami.load(callback);\n    if (typeof callback === \"function\") {\n        konami.code = callback;\n        konami.load();\n    }\n\n    return konami;\n};\n\n\nif ( true && typeof module.exports !== 'undefined') {\n        module.exports = Konami;\n} else {\n        if (true) {\n                !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n                        return Konami;\n                }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        } else {}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///P3Nu\n")},TG3o:function(module,exports,__webpack_require__){eval("exports = module.exports = __webpack_require__(\"JPst\")(false);\n// Imports\nvar urlEscape = __webpack_require__(\"tgXZ\");\nvar ___CSS_LOADER_URL___0___ = urlEscape(__webpack_require__(\"BF7s\"));\nvar ___CSS_LOADER_URL___1___ = urlEscape(__webpack_require__(\"kkC+\"));\n\n// Module\nexports.push([module.i, \"@font-face{font-family:'Schnyder L Web';src:url(\" + ___CSS_LOADER_URL___0___ + \") format(\\\"woff2\\\"),url(\" + ___CSS_LOADER_URL___1___ + \") format(\\\"woff\\\");font-weight:700;font-style:normal;font-stretch:normal}html,body{height:100%}body{margin:0;overflow:hidden;overscroll-behavior-y:none;background-color:#AEC7C3;-webkit-tap-highlight-color:rgba(0,0,0,0)}body *{-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}canvas{position:fixed;top:0;left:0;z-index:2}.ready .loading .progress-percent{opacity:0;visibility:hidden;transform:scale(0)}.loading{position:fixed;top:0;left:0;display:flex;flex-direction:column;width:100%;height:100%;align-items:center;justify-content:center;font-family:'Schnyder L Web';color:#1b42d8;font-size:40px;z-index:5;text-align:center}.loading svg{fill:#1b42d8}.loading .welcome{width:80px;height:12px;margin-bottom:30px;margin-top:30px;opacity:0;animation:scaleUp 3s cubic-bezier(0.19, 1, 0.22, 1);animation-fill-mode:forwards}@media screen and (min-width: 500px){.loading .welcome{margin-top:70px}}.loading h1{max-width:820px;margin:0 auto 30px;font-size:20px;line-height:1.2;padding:0 80px;opacity:0;animation:scaleUp 3s cubic-bezier(0.19, 1, 0.22, 1);animation-fill-mode:forwards}@media screen and (min-width: 400px){.loading h1{font-size:26px;margin:0 auto 90px}}@media screen and (min-width: 750px){.loading h1{font-size:36px;margin:0 auto 90px}}.loading .progress{position:relative;width:150px;height:150px;display:flex;align-items:center;justify-content:center;opacity:0;animation:scaleUp 3s cubic-bezier(0.19, 1, 0.22, 1);animation-delay:0.5s;animation-fill-mode:forwards}.ready .loading .progress:hover .progress-circle{transform:scale(0.8)}.loading .progress-percent{font-size:30px}.loading .enter{display:flex;align-items:center;justify-content:center;position:absolute;top:0;left:0;width:100%;height:100%;font-size:30px;text-decoration:none;color:#1b42d8;opacity:0;visibility:hidden;transform:scale(0)}.ready .loading .enter{opacity:1;visibility:visible;transform:scale(1)}.loading .progress-percent,.loading .enter,.loading .loading-text svg{transition-property:opacity, visibility, transform;transition-duration:0.6s;transition-timing-function:cubic-bezier(0.68, -0.55, 0.265, 1.85)}.loading .progress-circle{width:100%;height:100%;position:absolute;top:0;left:0;transition-property:transform;transition-duration:1s;transition-timing-function:cubic-bezier(0.19, 1, 0.22, 1)}.loading .progress-circle svg{fill:none}.loading .progress-circle svg .line{stroke:#1b42d8;stroke-miterlimit:10;stroke-width:0.5;stroke-dashoffset:252.363;stroke-dasharray:252.363px}.loading .progress-circle svg .track{stroke:rgba(27,66,216,0.2);stroke-miterlimit:10;stroke-width:0.5}.loading .loading-text{position:absolute;width:130%;height:130%;top:-15%;left:-15%;-webkit-animation:rotating 20s linear infinite;-moz-animation:rotating 20s linear infinite;-ms-animation:rotating 20s linear infinite;-o-animation:rotating 20s linear infinite;animation:rotating 20s linear infinite}.ready .loading .loading-text svg{opacity:0;visibility:hidden;transform:scale(1.5)}svg{display:block;width:100%;height:100%;overflow:visible}main{position:fixed;top:0;left:0;width:100%;height:100%;z-index:7;pointer-events:none}main svg{fill:#1b42d8}.logo{position:absolute;top:15px;left:15px;width:190px;height:22px;pointer-events:all;transform:translateY(-60px)}@media screen and (min-width: 750px){.logo{width:260px;height:30px}}.say-hello{position:absolute;top:18px;right:15px;width:86px;height:12px;pointer-events:all;transform:translateY(-60px)}@media screen and (min-width: 750px){.say-hello{width:96px;right:20px}}.say-hello:hover .underline{opacity:1}.say-hello .underline{position:absolute;bottom:-10px;padding-top:10px;width:100%;height:2px;opacity:0.3;border-bottom:2px solid #1b42da;transition:opacity 0.3s ease-in-out}.left,.right{position:absolute;top:50%;width:10px}@media screen and (min-width: 750px){.left,.right{width:12px}}.left{left:10px;transform:translate(-40px, -50%)}@media screen and (min-width: 750px){.left{left:15px}}.right{right:10px;transform:translate(40px, -50%)}@media screen and (min-width: 750px){.right{right:15px}}.social{position:absolute;bottom:15px;right:15px;transform:translateY(80px)}.social .social-link{display:inline-block;width:20px;height:20px;pointer-events:all}.social .social-link:not(:last-child){margin-right:10px}.compass{position:absolute;bottom:15px;left:15px;width:42px;height:42px;transform:translateY(80px);pointer-events:all}.compass svg,.cursor svg{fill:none;stroke:#1b42d8;stroke-miterlimit:10;stroke-width:12px}.cursor{position:absolute;top:0;left:0;z-index:10;transform:translate(-100px, -100px);pointer-events:none;display:none}.enable-cursor .cursor{display:block}.cursor[data-cursor=\\\"pointer\\\"] .pointer{transform:translate(-50%, -50%) scale(1);opacity:1}.cursor[data-cursor=\\\"cross\\\"] .cross{transform:translate(-50%, -50%) scale(1);opacity:1}.cursor[data-cursor=\\\"eye\\\"] .eye{transform:translate(-50%, -50%) scale(1);opacity:1}.cursor[data-cursor=\\\"move\\\"] .move{transform:translate(-50%, -50%) scale(1);opacity:1}.cursor[data-cursor=\\\"move\\\"] .move svg{stroke-dashoffset:0}.cursor[data-cursor=\\\"move\\\"] .move svg path{transform:scale(0.55);transition-timing-function:cubic-bezier(0.68, -0.55, 0.265, 1.85)}.cursor>div{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%) scale(0);transition-duration:0.6s;transition-timing-function:cubic-bezier(0.68, -0.55, 0.265, 1.85);transition-property:opacity, transform}.cursor .pointer{width:30px;height:50px;opacity:0}.cursor .eye{width:60px;height:60px;opacity:0}.cursor .cross{width:40px;height:40px;opacity:0}.cursor .move{width:80px;height:80px;transition-timing-function:ease-in-out}.cursor .move svg{stroke-width:1.5;stroke-dashoffset:252.363;stroke-dasharray:252.363px;transition:stroke-dashoffset 0.8s ease-in-out}.cursor .move svg path{transition-timing-function:ease-in-out;transition-duration:0.7s;transition-property:transform;transition-delay:0.7s;transform-origin:center}@keyframes rotating{from{-ms-transform:rotate(0deg);-moz-transform:rotate(0deg);-webkit-transform:rotate(0deg);-o-transform:rotate(0deg);transform:rotate(0deg)}to{-ms-transform:rotate(360deg);-moz-transform:rotate(360deg);-webkit-transform:rotate(360deg);-o-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes scaleUp{0%{opacity:0;transform:scale(0.4)}100%{opacity:1;transform:scale(1)}}@keyframes scaleUpPara{0%{opacity:0;line-height:1.7;transform:scale(0.4)}100%{opacity:1;line-height:1.2;transform:scale(1)}}@keyframes fadeInUp{0%{transform:translate3d(0, 150%, 0)}20%{opacity:0}100%{opacity:1;transform:translate3d(0, 0, 0)}}@keyframes fadeInUpSmall{0%{transform:translate3d(0, 50%, 0)}20%{opacity:0}100%{transform:translate3d(0, 0, 0);opacity:1}}\\n\", \"\"]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///TG3o\n")},WQPq:function(module,exports,__webpack_require__){eval("\nvar content = __webpack_require__(\"TG3o\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(\"aET+\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(true) {\n\tmodule.hot.accept(\"TG3o\", function() {\n\t\tvar newContent = __webpack_require__(\"TG3o\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.i, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV1FQcS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL3N0eWxlLnNjc3M/ZWFjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///WQPq\n")},"aET+":function(module,exports,__webpack_require__){eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(\"9tPo\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\tif(options.attrs.nonce === undefined) {\n\t\tvar nonce = getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce = nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (false) {}\n\n\treturn __webpack_require__.nc;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = typeof options.transform === 'function'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYUVUKy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcz82ODQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///aET+\n")},"kkC+":function(module,exports){eval("module.exports = \"data:font/woff;base64,\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///kkC+\n")},kpGR:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/scss/style.scss\nvar style = __webpack_require__(\"WQPq\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/scenes/Scene.js\nvar Scene = __webpack_require__(\"E3/K\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/math/Color.js\nvar Color = __webpack_require__(\"cuij\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/scenes/Fog.js\nvar Fog = __webpack_require__(\"BR65\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/cameras/PerspectiveCamera.js + 1 modules\nvar PerspectiveCamera = __webpack_require__(\"+8Os\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/core/Raycaster.js\nvar Raycaster = __webpack_require__(\"D10d\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/math/Frustum.js + 1 modules\nvar Frustum = __webpack_require__(\"LxkE\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/math/Matrix4.js\nvar Matrix4 = __webpack_require__(\"3+m9\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/math/Vector2.js\nvar Vector2 = __webpack_require__(\"TnI4\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/objects/Group.js\nvar Group = __webpack_require__(\"qdxW\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/materials/MeshBasicMaterial.js\nvar MeshBasicMaterial = __webpack_require__(\"AIox\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/math/Box3.js\nvar Box3 = __webpack_require__(\"/V9W\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/geometries/TextGeometry.js + 1 modules\nvar TextGeometry = __webpack_require__(\"brnI\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/objects/Mesh.js + 1 modules\nvar Mesh = __webpack_require__(\"Ncdj\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/geometries/PlaneGeometry.js\nvar PlaneGeometry = __webpack_require__(\"XPv6\");\n\n// EXTERNAL MODULE: ./node_modules/gsap/index.js + 10 modules\nvar gsap = __webpack_require__(\"z/o8\");\n\n// CONCATENATED MODULE: ./node_modules/tinygesture/TinyGesture.js\n/**\n * TinyGesture.js\n *\n * This service uses passive listeners, so you can't call event.preventDefault()\n * on any of the events.\n *\n * Adapted from https://gist.github.com/SleepWalker/da5636b1abcbaff48c4d\n * and https://github.com/uxitten/xwiper\n */\nclass TinyGesture {\n  constructor (element, options) {\n    options = Object.assign({}, TinyGesture.defaults, options);\n    this.element = element;\n    this.opts = options;\n    this.touchStartX = null;\n    this.touchStartY = null;\n    this.touchEndX = null;\n    this.touchEndY = null;\n    this.velocityX = null;\n    this.velocityY = null;\n    this.longPressTimer = null;\n    this.doubleTapWaiting = false;\n    this.handlers = {\n      'panstart': [],\n      'panmove': [],\n      'panend': [],\n      'swipeleft': [],\n      'swiperight': [],\n      'swipeup': [],\n      'swipedown': [],\n      'tap': [],\n      'doubletap': [],\n      'longpress': []\n    };\n\n    this._onTouchStart = this.onTouchStart.bind(this);\n    this._onTouchMove = this.onTouchMove.bind(this);\n    this._onTouchEnd = this.onTouchEnd.bind(this);\n\n    this.element.addEventListener('touchstart', this._onTouchStart, passiveIfSupported);\n    this.element.addEventListener('touchmove', this._onTouchMove, passiveIfSupported);\n    this.element.addEventListener('touchend', this._onTouchEnd, passiveIfSupported);\n\n    if (this.opts.mouseSupport && !('ontouchstart' in window)) {\n      this.element.addEventListener('mousedown', this._onTouchStart, passiveIfSupported);\n      document.addEventListener('mousemove', this._onTouchMove, passiveIfSupported);\n      document.addEventListener('mouseup', this._onTouchEnd, passiveIfSupported);\n    }\n  }\n\n  destroy () {\n    this.element.removeEventListener('touchstart', this._onTouchStart);\n    this.element.removeEventListener('touchmove', this._onTouchMove);\n    this.element.removeEventListener('touchend', this._onTouchEnd);\n    this.element.removeEventListener('mousedown', this._onTouchStart);\n    document.removeEventListener('mousemove', this._onTouchMove);\n    document.removeEventListener('mouseup', this._onTouchEnd);\n    clearTimeout(this.longPressTimer);\n    clearTimeout(this.doubleTapTimer);\n  }\n\n  on (type, fn) {\n    if (this.handlers[type]) {\n      this.handlers[type].push(fn);\n      return {\n        type,\n        fn,\n        cancel: () => this.off(type, fn)\n      };\n    }\n  }\n\n  off (type, fn) {\n    if (this.handlers[type]) {\n      const idx = this.handlers[type].indexOf(fn);\n      if (idx !== -1) {\n        this.handlers[type].splice(idx, 1);\n      }\n    }\n  }\n\n  fire (type, event) {\n    for (let i = 0; i < this.handlers[type].length; i++) {\n      this.handlers[type][i](event);\n    }\n  }\n\n  onTouchStart (event) {\n    this.thresholdX = this.opts.threshold('x', this);\n    this.thresholdY = this.opts.threshold('y', this);\n    this.disregardVelocityThresholdX = this.opts.disregardVelocityThreshold('x', this);\n    this.disregardVelocityThresholdY = this.opts.disregardVelocityThreshold('y', this);\n    this.touchStartX = (event.type === 'mousedown' ? event.screenX : event.changedTouches[0].screenX);\n    this.touchStartY = (event.type === 'mousedown' ? event.screenY : event.changedTouches[0].screenY);\n    this.touchMoveX = null;\n    this.touchMoveY = null;\n    this.touchEndX = null;\n    this.touchEndY = null;\n    // Long press.\n    this.longPressTimer = setTimeout(() => this.fire('longpress', event), this.opts.longPressTime);\n    this.fire('panstart', event);\n  }\n\n  onTouchMove (event) {\n    if (event.type === 'mousemove' && (!this.touchStartX || this.touchEndX !== null)) {\n      return;\n    }\n    const touchMoveX = (event.type === 'mousemove' ? event.screenX : event.changedTouches[0].screenX) - this.touchStartX;\n    this.velocityX = touchMoveX - this.touchMoveX;\n    this.touchMoveX = touchMoveX;\n    const touchMoveY = (event.type === 'mousemove' ? event.screenY : event.changedTouches[0].screenY) - this.touchStartY;\n    this.velocityY = touchMoveY - this.touchMoveY;\n    this.touchMoveY = touchMoveY;\n    const absTouchMoveX = Math.abs(this.touchMoveX);\n    const absTouchMoveY = Math.abs(this.touchMoveY);\n    this.swipingHorizontal = absTouchMoveX > this.thresholdX;\n    this.swipingVertical = absTouchMoveY > this.thresholdY;\n    this.swipingDirection = absTouchMoveX > absTouchMoveY\n      ? (this.swipingHorizontal ? 'horizontal' : 'pre-horizontal')\n      : (this.swipingVertical ? 'vertical' : 'pre-vertical');\n    if (Math.max(absTouchMoveX, absTouchMoveY) > this.opts.pressThreshold) {\n      clearTimeout(this.longPressTimer);\n    }\n    this.fire('panmove', event);\n  }\n\n  onTouchEnd (event) {\n    if (event.type === 'mouseup' && (!this.touchStartX || this.touchEndX !== null)) {\n      return;\n    }\n    this.touchEndX = (event.type === 'mouseup' ? event.screenX : event.changedTouches[0].screenX);\n    this.touchEndY = (event.type === 'mouseup' ? event.screenY : event.changedTouches[0].screenY);\n    this.fire('panend', event);\n    clearTimeout(this.longPressTimer);\n\n    const x = this.touchEndX - this.touchStartX;\n    const absX = Math.abs(x);\n    const y = this.touchEndY - this.touchStartY;\n    const absY = Math.abs(y);\n\n    if (absX > this.thresholdX || absY > this.thresholdY) {\n      this.swipedHorizontal = this.opts.diagonalSwipes ? Math.abs(x / y) <= this.opts.diagonalLimit : absX >= absY && absX > this.thresholdX;\n      this.swipedVertical = this.opts.diagonalSwipes ? Math.abs(y / x) <= this.opts.diagonalLimit : absY > absX && absY > this.thresholdY;\n      if (this.swipedHorizontal) {\n        if (x < 0) {\n          // Left swipe.\n          if (this.velocityX < -this.opts.velocityThreshold || x < -this.disregardVelocityThresholdX) {\n            this.fire('swipeleft', event);\n          }\n        } else {\n          // Right swipe.\n          if (this.velocityX > this.opts.velocityThreshold || x > this.disregardVelocityThresholdX) {\n            this.fire('swiperight', event);\n          }\n        }\n      }\n      if (this.swipedVertical) {\n        if (y < 0) {\n          // Upward swipe.\n          if (this.velocityY < -this.opts.velocityThreshold || y < -this.disregardVelocityThresholdY) {\n            this.fire('swipeup', event);\n          }\n        } else {\n          // Downward swipe.\n          if (this.velocityY > this.opts.velocityThreshold || y > this.disregardVelocityThresholdY) {\n            this.fire('swipedown', event);\n          }\n        }\n      }\n    } else if (absX < this.opts.pressThreshold && absY < this.opts.pressThreshold) {\n      // Tap.\n      if (this.doubleTapWaiting) {\n        this.doubleTapWaiting = false;\n        clearTimeout(this.doubleTapTimer);\n        this.fire('doubletap', event);\n      } else {\n        this.doubleTapWaiting = true;\n        this.doubleTapTimer = setTimeout(() => this.doubleTapWaiting = false, this.opts.doubleTapTime);\n        this.fire('tap', event);\n      }\n    }\n  }\n}\n\nTinyGesture.defaults = {\n  threshold: (type, self) => Math.max(25, Math.floor(0.15 * (type === 'x' ? window.innerWidth || document.body.clientWidth : window.innerHeight || document.body.clientHeight))),\n  velocityThreshold: 10,\n  disregardVelocityThreshold: (type, self) => Math.floor(0.5 * (type === 'x' ? self.element.clientWidth : self.element.clientHeight)),\n  pressThreshold: 8,\n  diagonalSwipes: false,\n  diagonalLimit: Math.tan(45 * 1.5 / 180 * Math.PI),\n  longPressTime: 500,\n  doubleTapTime: 300,\n  mouseSupport: true\n};\n\n// Passive feature detection.\nlet passiveIfSupported = false;\n\ntry {\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', { get: function() { passiveIfSupported = { passive: true }; } }));\n} catch(err) {}\n\n// EXTERNAL MODULE: ./node_modules/three/src/loaders/TextureLoader.js + 1 modules\nvar TextureLoader = __webpack_require__(\"xC2a\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/loaders/FontLoader.js + 19 modules\nvar FontLoader = __webpack_require__(\"EpSA\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/textures/VideoTexture.js\nvar VideoTexture = __webpack_require__(\"e/Nn\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/constants.js\nvar constants = __webpack_require__(\"6deg\");\n\n// CONCATENATED MODULE: ./src/js/utils/progressPromise.js\nfunction progressPromise(promises, tickCallback) {\n  var len = promises.length;\n  var progress = 0;\n\n  function tick(promise) {\n    promise.then(function () {\n      progress++;\n      tickCallback(progress, len);\n    }).catch(function (reason) {\n      console.log(reason);\n    });\n    return promise;\n  }\n\n  return Promise.all(promises.map(tick));\n}\n\n/* harmony default export */ var utils_progressPromise = (progressPromise);\n// CONCATENATED MODULE: ./src/js/utils/DomAssetLoader.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar DomAssetLoader_AssetLoader =\n/*#__PURE__*/\nfunction () {\n  function AssetLoader(isMobile) {\n    _classCallCheck(this, AssetLoader);\n\n    this.isMobile = isMobile;\n    this.assets = {\n      textures: {},\n      fonts: {}\n    };\n    this.assetList = {};\n    this.renderer = null;\n    this.progressEl = document.querySelector('.progress-percent');\n    this.progressBar = document.querySelector('.progress-circle .line');\n    this.videosToLoad = 0;\n  }\n\n  _createClass(AssetLoader, [{\n    key: \"load\",\n    value: function load(assetList, renderer) {\n      var _this = this;\n\n      this.assetList = assetList;\n      this.renderer = renderer;\n      var assetLoadPromises = []; // Load images + videos\n\n      var imageLoader = new TextureLoader[\"a\" /* TextureLoader */]();\n      imageLoader.crossOrigin = ''; // Load Fonts\n\n      var fontLoader = new FontLoader[\"a\" /* FontLoader */]();\n      var fonts = ['fonts/schnyder.json', 'fonts/schnyder-outline.json', 'fonts/suisse.json'];\n\n      var _loop = function _loop(i) {\n        assetLoadPromises.push(new Promise(function (resolve) {\n          return fontLoader.load(fonts[i], function (font) {\n            _this.assets.fonts[font.data.familyName] = font;\n            resolve();\n          });\n        }));\n      };\n\n      for (var i = 0; i < fonts.length; i++) {\n        _loop(i);\n      }\n\n      return new Promise(function (resolve) {\n        utils_progressPromise(assetLoadPromises, _this.update.bind(_this)).then(function () {\n          resolve(_this.assets);\n        });\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(completed, total) {\n      var progress = Math.round(completed / total * 100);\n      this.progressEl.innerHTML = progress + '%';\n      this.progressBar.style.strokeDashoffset = 252.363 - 252.363 * (completed / total);\n    }\n  }, {\n    key: \"videoPromise\",\n    value: function videoPromise(video, month, filename, resolve, retry) {\n      var _this2 = this;\n\n      if (retry) video.load();\n      if (!this.isMobile) video.oncanplaythrough = function () {\n        return _this2.createVideoTexture(video, month, filename, resolve);\n      };else {\n        video.onloadeddata = function () {\n          video.onerror = null;\n\n          _this2.createVideoTexture(video, month, filename, resolve);\n        };\n\n        video.onerror = function () {\n          video.onloadeddata = null;\n\n          _this2.videoPromise(video, month, filename, resolve, true);\n        };\n      }\n    }\n  }, {\n    key: \"createImageTexture\",\n    value: function createImageTexture(texture, month, filename, resolve) {\n      var _this3 = this;\n\n      // if preloaded\n      if (resolve) {\n        texture.size = new Vector2[\"a\" /* Vector2 */](texture.image.width / 2, texture.image.height / 2);\n        texture.needsUpdate = true;\n        this.renderer.setTexture2D(texture, 0);\n        texture.name = \"\".concat(month, \"/\").concat(filename);\n        texture.mediaType = 'image';\n        texture.anisotropy = this.renderer.capabilities.getMaxAnisotropy();\n        if (!this.assets.textures[month]) this.assets.textures[month] = {};\n        this.assets.textures[month][filename] = texture;\n        resolve(texture);\n      } else {\n        var _texture = new TextureLoader[\"a\" /* TextureLoader */]().load(\"assets/\".concat(month, \"/\").concat(filename), function (texture) {\n          texture.size = new Vector2[\"a\" /* Vector2 */](texture.image.width / 2, texture.image.height / 2);\n          texture.needsUpdate = true;\n\n          _this3.renderer.setTexture2D(texture, 0);\n        });\n\n        _texture.size = new Vector2[\"a\" /* Vector2 */](10, 10);\n        _texture.name = \"\".concat(month, \"/\").concat(filename);\n        _texture.mediaType = 'image';\n        _texture.anisotropy = this.renderer.capabilities.getMaxAnisotropy();\n        if (!this.assets.textures[month]) this.assets.textures[month] = {};\n        this.assets.textures[month][filename] = _texture;\n      }\n    }\n  }, {\n    key: \"createVideoTexture\",\n    value: function createVideoTexture(video, month, filename, resolve, reject) {\n      var texture = new VideoTexture[\"a\" /* VideoTexture */](video);\n      texture.minFilter = texture.magFilter = constants[\"i\" /* LinearFilter */];\n      texture.name = \"\".concat(month, \"/\").concat(filename);\n      texture.mediaType = 'video';\n      texture.anisotropy = this.renderer.capabilities.getMaxAnisotropy(); // if preloaded\n\n      if (resolve) {\n        texture.size = new Vector2[\"a\" /* Vector2 */](texture.image.videoWidth / 2, texture.image.videoHeight / 2);\n        this.renderer.setTexture2D(texture, 0);\n\n        if (!this.isMobile) {\n          video.oncanplaythrough = null;\n        } else {\n          video.src = '';\n          video.load();\n          video.onloadeddata = null;\n        }\n\n        resolve(texture);\n      } else {\n        texture.size = new Vector2[\"a\" /* Vector2 */](1, 1);\n\n        video.oncanplaythrough = function () {\n          texture.size = new Vector2[\"a\" /* Vector2 */](texture.image.videoWidth / 2, texture.image.videoHeight / 2);\n          texture.needsUpdate = true;\n          video.oncanplaythrough = null;\n        };\n      }\n\n      if (!this.assets.textures[month]) this.assets.textures[month] = {};\n      this.assets.textures[month][filename] = texture;\n    }\n  }]);\n\n  return AssetLoader;\n}();\n\n\n// EXTERNAL MODULE: ./node_modules/three/src/materials/ShaderMaterial.js + 1 modules\nvar ShaderMaterial = __webpack_require__(\"dt5g\");\n\n// EXTERNAL MODULE: ./src/js/shaders/greenscreen.frag\nvar greenscreen = __webpack_require__(\"x3HC\");\nvar greenscreen_default = /*#__PURE__*/__webpack_require__.n(greenscreen);\n\n// EXTERNAL MODULE: ./src/js/shaders/default.vert\nvar shaders_default = __webpack_require__(\"Li5z\");\nvar default_default = /*#__PURE__*/__webpack_require__.n(shaders_default);\n\n// EXTERNAL MODULE: ./node_modules/three/src/math/Vector3.js\nvar Vector3 = __webpack_require__(\"w+kJ\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/math/Quaternion.js\nvar Quaternion = __webpack_require__(\"breI\");\n\n// EXTERNAL MODULE: ./node_modules/three/src/core/Object3D.js + 2 modules\nvar Object3D = __webpack_require__(\"p1p1\");\n\n// CONCATENATED MODULE: ./src/customThree/THREECSS3DOM.js\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction THREECSS3DOM_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction THREECSS3DOM_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction THREECSS3DOM_createClass(Constructor, protoProps, staticProps) { if (protoProps) THREECSS3DOM_defineProperties(Constructor.prototype, protoProps); if (staticProps) THREECSS3DOM_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n */\n\nvar _position = new Vector3[\"a\" /* Vector3 */]();\n\nvar _quaternion = new Quaternion[\"a\" /* Quaternion */]();\n\nvar _scale = new Vector3[\"a\" /* Vector3 */]();\n\nvar CSS3DObject =\n/*#__PURE__*/\nfunction (_Object3D) {\n  _inherits(CSS3DObject, _Object3D);\n\n  function CSS3DObject() {\n    var _this2;\n\n    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.createElement('div');\n\n    THREECSS3DOM_classCallCheck(this, CSS3DObject);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(CSS3DObject).call(this));\n    _this2.element = element;\n    _this2.element.style.position = 'absolute';\n    _this2.element.style.pointerEvents = 'auto';\n    _this2.element.style.userSelect = 'none';\n\n    _this2.element.setAttribute('draggable', false);\n\n    _this2.addEventListener('removed', function () {\n      this.traverse(function (object) {\n        if (object.element instanceof Element && object.element.parentNode !== null) {\n          object.element.parentNode.removeChild(object.element);\n        }\n      });\n    });\n\n    return _this2;\n  }\n\n  THREECSS3DOM_createClass(CSS3DObject, [{\n    key: \"copy\",\n    value: function copy(source, recursive) {\n      _get(_getPrototypeOf(CSS3DObject.prototype), \"copy\", this).call(this, source, recursive);\n\n      this.element = source.element.cloneNode(true);\n      return this;\n    }\n  }]);\n\n  return CSS3DObject;\n}(Object3D[\"a\" /* Object3D */]);\n\nCSS3DObject.prototype.isCSS3DObject = true;\n\nvar CSS3DSprite =\n/*#__PURE__*/\nfunction (_CSS3DObject) {\n  _inherits(CSS3DSprite, _CSS3DObject);\n\n  function CSS3DSprite(element) {\n    var _this3;\n\n    THREECSS3DOM_classCallCheck(this, CSS3DSprite);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(CSS3DSprite).call(this, element));\n    _this3.rotation2D = 0;\n    return _this3;\n  }\n\n  THREECSS3DOM_createClass(CSS3DSprite, [{\n    key: \"copy\",\n    value: function copy(source, recursive) {\n      _get(_getPrototypeOf(CSS3DSprite.prototype), \"copy\", this).call(this, source, recursive);\n\n      this.rotation2D = source.rotation2D;\n      return this;\n    }\n  }]);\n\n  return CSS3DSprite;\n}(CSS3DObject);\n\nCSS3DSprite.prototype.isCSS3DSprite = true; //\n\nvar _matrix = new Matrix4[\"a\" /* Matrix4 */]();\n\nvar _matrix2 = new Matrix4[\"a\" /* Matrix4 */]();\n\nvar CSS3DRenderer = function CSS3DRenderer() {\n  var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  THREECSS3DOM_classCallCheck(this, CSS3DRenderer);\n\n  var _this = this;\n\n  var _width, _height;\n\n  var _widthHalf, _heightHalf;\n\n  var cache = {\n    camera: {\n      fov: 0,\n      style: ''\n    },\n    objects: new WeakMap()\n  };\n  var domElement = parameters.element !== undefined ? parameters.element : document.createElement('div');\n  domElement.style.overflow = 'hidden';\n  this.domElement = domElement;\n  var cameraElement = document.createElement('div');\n  cameraElement.style.transformStyle = 'preserve-3d';\n  cameraElement.style.pointerEvents = 'none';\n  domElement.appendChild(cameraElement);\n\n  this.getSize = function () {\n    return {\n      width: _width,\n      height: _height\n    };\n  };\n\n  this.render = function (scene, camera) {\n    var fov = camera.projectionMatrix.elements[5] * _heightHalf;\n\n    if (cache.camera.fov !== fov) {\n      domElement.style.perspective = camera.isPerspectiveCamera ? fov + 'px' : '';\n      cache.camera.fov = fov;\n    }\n\n    if (scene.autoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n    var tx, ty;\n\n    if (camera.isOrthographicCamera) {\n      tx = -(camera.right + camera.left) / 2;\n      ty = (camera.top + camera.bottom) / 2;\n    }\n\n    var cameraCSSMatrix = camera.isOrthographicCamera ? 'scale(' + fov + ')' + 'translate(' + epsilon(tx) + 'px,' + epsilon(ty) + 'px)' + getCameraCSSMatrix(camera.matrixWorldInverse) : 'translateZ(' + fov + 'px)' + getCameraCSSMatrix(camera.matrixWorldInverse);\n    var style = cameraCSSMatrix + 'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)';\n\n    if (cache.camera.style !== style) {\n      cameraElement.style.transform = style;\n      cache.camera.style = style;\n    }\n\n    renderObject(scene, scene, camera, cameraCSSMatrix);\n  };\n\n  this.setSize = function (width, height) {\n    _width = width;\n    _height = height;\n    _widthHalf = _width / 2;\n    _heightHalf = _height / 2;\n    domElement.style.width = width + 'px';\n    domElement.style.height = height + 'px';\n    cameraElement.style.width = width + 'px';\n    cameraElement.style.height = height + 'px';\n  };\n\n  function epsilon(value) {\n    return Math.abs(value) < 1e-10 ? 0 : value;\n  }\n\n  function getCameraCSSMatrix(matrix) {\n    var elements = matrix.elements;\n    return 'matrix3d(' + epsilon(elements[0]) + ',' + epsilon(-elements[1]) + ',' + epsilon(elements[2]) + ',' + epsilon(elements[3]) + ',' + epsilon(elements[4]) + ',' + epsilon(-elements[5]) + ',' + epsilon(elements[6]) + ',' + epsilon(elements[7]) + ',' + epsilon(elements[8]) + ',' + epsilon(-elements[9]) + ',' + epsilon(elements[10]) + ',' + epsilon(elements[11]) + ',' + epsilon(elements[12]) + ',' + epsilon(-elements[13]) + ',' + epsilon(elements[14]) + ',' + epsilon(elements[15]) + ')';\n  }\n\n  function getObjectCSSMatrix(matrix) {\n    var elements = matrix.elements;\n    var matrix3d = 'matrix3d(' + epsilon(elements[0]) + ',' + epsilon(elements[1]) + ',' + epsilon(elements[2]) + ',' + epsilon(elements[3]) + ',' + epsilon(-elements[4]) + ',' + epsilon(-elements[5]) + ',' + epsilon(-elements[6]) + ',' + epsilon(-elements[7]) + ',' + epsilon(elements[8]) + ',' + epsilon(elements[9]) + ',' + epsilon(elements[10]) + ',' + epsilon(elements[11]) + ',' + epsilon(elements[12]) + ',' + epsilon(elements[13]) + ',' + epsilon(elements[14]) + ',' + epsilon(elements[15]) + ')';\n    return 'translate(-50%,-50%)' + matrix3d;\n  }\n\n  function renderObject(object, scene, camera, cameraCSSMatrix) {\n    if (object.isCSS3DObject) {\n      object.onBeforeRender(_this, scene, camera);\n      var style;\n\n      if (object.isCSS3DSprite) {\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\n        _matrix.copy(camera.matrixWorldInverse);\n\n        _matrix.transpose();\n\n        if (object.rotation2D !== 0) _matrix.multiply(_matrix2.makeRotationZ(object.rotation2D));\n        object.matrixWorld.decompose(_position, _quaternion, _scale);\n\n        _matrix.setPosition(_position);\n\n        _matrix.scale(_scale);\n\n        _matrix.elements[3] = 0;\n        _matrix.elements[7] = 0;\n        _matrix.elements[11] = 0;\n        _matrix.elements[15] = 1;\n        style = getObjectCSSMatrix(_matrix);\n      } else {\n        style = getObjectCSSMatrix(object.matrixWorld);\n      }\n\n      var element = object.element;\n      var cachedObject = cache.objects.get(object);\n\n      if (cachedObject === undefined || cachedObject.style !== style) {\n        element.style.transform = style;\n        var objectData = {\n          style: style\n        };\n        cache.objects.set(object, objectData);\n      }\n\n      element.style.display = object.visible ? '' : 'none';\n\n      if (element.parentNode !== cameraElement) {\n        cameraElement.appendChild(element);\n      }\n\n      object.onAfterRender(_this, scene, camera);\n    }\n\n    for (var i = 0, l = object.children.length; i < l; i++) {\n      renderObject(object.children[i], scene, camera, cameraCSSMatrix);\n    }\n  }\n};\n\n\n// CONCATENATED MODULE: ./src/js/components/DomSection.js\nfunction DomSection_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { DomSection_typeof = function _typeof(obj) { return typeof obj; }; } else { DomSection_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return DomSection_typeof(obj); }\n\nfunction DomSection_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DomSection_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DomSection_createClass(Constructor, protoProps, staticProps) { if (protoProps) DomSection_defineProperties(Constructor.prototype, protoProps); if (staticProps) DomSection_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction DomSection_possibleConstructorReturn(self, call) { if (call && (DomSection_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return DomSection_assertThisInitialized(self); }\n\nfunction DomSection_getPrototypeOf(o) { DomSection_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return DomSection_getPrototypeOf(o); }\n\nfunction DomSection_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) DomSection_setPrototypeOf(subClass, superClass); }\n\nfunction DomSection_setPrototypeOf(o, p) { DomSection_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return DomSection_setPrototypeOf(o, p); }\n\nfunction DomSection_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n\n\n\n\n\n\n\n\nvar DomSection_Section =\n/*#__PURE__*/\nfunction (_THREE$Group) {\n  DomSection_inherits(Section, _THREE$Group);\n\n  function Section() {\n    var _this;\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      timeline: timeline,\n      section: section\n    };\n\n    DomSection_classCallCheck(this, Section);\n\n    _this = DomSection_possibleConstructorReturn(this, DomSection_getPrototypeOf(Section).call(this));\n    Object.assign(DomSection_assertThisInitialized(DomSection_assertThisInitialized(_this)), opts);\n    if (_this.section === 'intro') _this.createIntroSection();else if (_this.section === 'dec') _this.createNextection();else if (_this.section === 'end') _this.createEndSection();else if (_this.section === 'contact') _this.createNextection(); //this.createContactSection()\n    else _this.create();\n    return _this;\n  }\n\n  DomSection_createClass(Section, [{\n    key: \"create\",\n    value: function create() {\n      var textGeom = new TextGeometry[\"a\" /* TextGeometry */](this.timeline.months[this.section].name, {\n        font: this.timeline.assets.fonts['Schnyder L'],\n        size: 200,\n        height: 0,\n        curveSegments: 10\n      }).center();\n      var monthName = new Mesh[\"a\" /* Mesh */](textGeom, this.timeline.textMat);\n      monthName.position.set(this.timeline.months[this.section].offset || 0, 0, 0);\n      this.add(monthName);\n    }\n  }, {\n    key: \"createIntroSection\",\n    value: function createIntroSection() {\n      var sansTextGeom = new TextGeometry[\"a\" /* TextGeometry */]('YEAR IN REVIEW', {\n        font: this.timeline.assets.fonts['SuisseIntl-Bold'],\n        size: 60,\n        height: 0,\n        curveSegments: 4\n      }).center();\n      var sansText = new Mesh[\"a\" /* Mesh */](sansTextGeom, this.timeline.textMat);\n      this.add(sansText);\n      var serifTextGeom = new TextGeometry[\"a\" /* TextGeometry */]('2018', {\n        font: this.timeline.assets.fonts['Schnyder_Edit Outline'],\n        size: 640,\n        height: 0,\n        curveSegments: 15\n      }).center();\n      var serifText = new Mesh[\"a\" /* Mesh */](serifTextGeom, this.timeline.textOutlineMat);\n      serifText.position.set(0, 0, -500);\n      this.add(serifText);\n      console.log(this.timeline.assets.textures);\n      var material = new MeshBasicMaterial[\"a\" /* MeshBasicMaterial */]({\n        map: this.timeline.assets.textures['intro']['ok.png'],\n        transparent: true\n      });\n      var geom = new PlaneGeometry[\"b\" /* PlaneGeometry */](1, 1);\n      var hand = new Mesh[\"a\" /* Mesh */](geom, material);\n      hand.scale.set(800, 800, 1);\n      hand.position.set(0, 0, -250);\n      this.add(hand);\n      this.addIntroBadge();\n    }\n  }, {\n    key: \"addIntroBadge\",\n    value: function addIntroBadge() {\n      this.badge = new Group[\"a\" /* Group */]();\n      var texture = new TextureLoader[\"a\" /* TextureLoader */]().load('images/highlights.png');\n      texture.magFilter = texture.minFilter = constants[\"i\" /* LinearFilter */];\n      var material = new MeshBasicMaterial[\"a\" /* MeshBasicMaterial */]({\n        map: texture,\n        transparent: true\n      });\n      var geom = new PlaneGeometry[\"b\" /* PlaneGeometry */](1, 1);\n      this.circle = new Mesh[\"a\" /* Mesh */](geom, material);\n      this.circle.scale.set(200, 200, 1);\n      this.badge.add(this.circle);\n      var serifTextGeom = new TextGeometry[\"a\" /* TextGeometry */]('2018-19', {\n        font: this.timeline.assets.fonts['Schnyder L'],\n        size: 26,\n        height: 0,\n        curveSegments: 6\n      });\n      serifTextGeom.center();\n      var serifText = new Mesh[\"a\" /* Mesh */](serifTextGeom, this.timeline.textMat);\n      serifText.position.set(0, 0, 1);\n      this.badge.add(serifText);\n      this.badge.position.set(0, 0, 50);\n      this.badge.position.y = this.timeline.c.size.w < 600 ? -this.timeline.c.size.h + 90 : -this.timeline.c.size.h / 2 + 90;\n      if (this.timeline.c.size.w < 600) this.badge.scale.set(1.5, 1.5, 1);\n      this.add(this.badge);\n    }\n  }, {\n    key: \"createEndSection\",\n    value: function createEndSection() {\n      var sansTextGeom = new TextGeometry[\"a\" /* TextGeometry */]('SEE YOU NEXT YEAR', {\n        font: this.timeline.assets.fonts['SuisseIntl-Bold'],\n        size: 60,\n        height: 0,\n        curveSegments: 4\n      }).center();\n      var sansText = new Mesh[\"a\" /* Mesh */](sansTextGeom, this.timeline.textMat);\n      this.add(sansText);\n      var serifTextGeom = new TextGeometry[\"a\" /* TextGeometry */]('END', {\n        font: this.timeline.assets.fonts['Schnyder_Edit Outline'],\n        size: 580,\n        height: 0,\n        curveSegments: 15\n      }).center();\n      var serifText = new Mesh[\"a\" /* Mesh */](serifTextGeom, this.timeline.textOutlineMat);\n      serifText.position.set(0, 0, -300);\n      this.add(serifText);\n      var geometry = new PlaneGeometry[\"b\" /* PlaneGeometry */](1, 1);\n      var material = new ShaderMaterial[\"a\" /* ShaderMaterial */]({\n        uniforms: {\n          fogColor: {\n            type: \"c\",\n            value: this.timeline.scene.fog.color\n          },\n          fogNear: {\n            type: \"f\",\n            value: this.timeline.scene.fog.near\n          },\n          fogFar: {\n            type: \"f\",\n            value: this.timeline.scene.fog.far\n          },\n          texture: {\n            type: 't',\n            value: this.timeline.assets.textures['end']['wave.mp4']\n          }\n        },\n        fragmentShader: greenscreen_default.a,\n        vertexShader: default_default.a,\n        fog: true,\n        transparent: true\n      });\n      var mesh = new Mesh[\"a\" /* Mesh */](geometry, material);\n      mesh.scale.set(700, 700, 1);\n      mesh.position.set(0, 0, -200);\n      this.timeline.videoItems.push(mesh);\n      this.add(mesh);\n      this.addWhooshButton();\n    }\n  }, {\n    key: \"addWhooshButton\",\n    value: function addWhooshButton() {\n      this.whoosh = new Group[\"a\" /* Group */]();\n      var whooshTexture = new TextureLoader[\"a\" /* TextureLoader */]().load('images/whoooosh.png');\n      whooshTexture.magFilter = whooshTexture.minFilter = constants[\"i\" /* LinearFilter */];\n      var whooshMaterial = new MeshBasicMaterial[\"a\" /* MeshBasicMaterial */]({\n        map: whooshTexture,\n        transparent: true,\n        depthWrite: false\n      });\n      var whooshGeom = new PlaneGeometry[\"b\" /* PlaneGeometry */](1, 1);\n      this.circle = new Mesh[\"a\" /* Mesh */](whooshGeom, whooshMaterial);\n      this.circle.scale.set(200, 200, 1);\n      this.whoosh.add(this.circle);\n      var texture = new TextureLoader[\"a\" /* TextureLoader */]().load('images/arrowdown.png');\n      texture.anisotropy = this.timeline.renderer.capabilities.getMaxAnisotropy();\n      texture.magFilter = texture.minFilter = constants[\"i\" /* LinearFilter */];\n      var material = new MeshBasicMaterial[\"a\" /* MeshBasicMaterial */]({\n        map: texture,\n        transparent: true,\n        side: constants[\"d\" /* DoubleSide */],\n        depthWrite: false\n      });\n      var geom = new PlaneGeometry[\"b\" /* PlaneGeometry */](1, 1);\n      this.arrow = new Mesh[\"a\" /* Mesh */](geom, material);\n      this.arrow.scale.set(90, 90, 1);\n      this.arrow.position.z = 20;\n      this.whoosh.add(this.arrow);\n      this.whoosh.position.set(0, -450, 50);\n      if (this.timeline.c.size.w < 600) this.whoosh.scale.set(1.5, 1.5, 1);\n      this.add(this.whoosh);\n    }\n  }, {\n    key: \"createContactSection\",\n    value: function createContactSection() {\n      this.position.set(0, 2000 / this.timeline.scene.scale.y, 0);\n      this.visible = false;\n      var sansTextGeom = new TextGeometry[\"a\" /* TextGeometry */]('SAY HELLO', {\n        font: this.timeline.assets.fonts['SuisseIntl-Bold'],\n        size: 10,\n        height: 0,\n        curveSegments: 4\n      }).center();\n      var sansText = new Mesh[\"a\" /* Mesh */](sansTextGeom, this.timeline.textMat);\n      sansText.position.set(0, 60, 0);\n      this.add(sansText);\n      var lineOneGeom = new TextGeometry[\"a\" /* TextGeometry */](\"Let\u2019s make 2019 just as memorable with more\", {\n        font: this.timeline.assets.fonts['Schnyder L'],\n        size: 30,\n        height: 0,\n        curveSegments: 6\n      }).center();\n      var lineOne = new Mesh[\"a\" /* Mesh */](lineOneGeom, this.timeline.contactTextMat);\n      lineOne.position.set(0, 0, 0);\n      this.add(lineOne);\n      var lineTwoGeom = new TextGeometry[\"a\" /* TextGeometry */](\"amazing talent and exciting new projects.\", {\n        font: this.timeline.assets.fonts['Schnyder L'],\n        size: 30,\n        height: 0,\n        curveSegments: 6\n      }).center();\n      var lineTwo = new Mesh[\"a\" /* Mesh */](lineTwoGeom, this.timeline.contactTextMat);\n      lineTwo.position.set(0, -45, 0);\n      this.add(lineTwo);\n      var emailGeom = new TextGeometry[\"a\" /* TextGeometry */](\"hello@craftedbygc.com\", {\n        font: this.timeline.assets.fonts['Schnyder L'],\n        size: 36,\n        height: 0,\n        curveSegments: 6\n      }).center();\n      var email = new Mesh[\"a\" /* Mesh */](emailGeom, this.timeline.textMat);\n      email.position.set(0, -140, 0);\n      this.add(email);\n      var emailUnderline = new Mesh[\"a\" /* Mesh */](new PlaneGeometry[\"a\" /* PlaneBufferGeometry */](467, 1), this.timeline.linkUnderlineMat);\n      emailUnderline.position.set(0, -172, 0);\n      this.add(emailUnderline); // for raycasting so it doesn't just pick up on letters\n\n      this.linkBox = new Mesh[\"a\" /* Mesh */](new PlaneGeometry[\"a\" /* PlaneBufferGeometry */](490, 60), new MeshBasicMaterial[\"a\" /* MeshBasicMaterial */]({\n        alphaTest: 0,\n        visible: false\n      }));\n      this.linkBox.position.set(0, -140, 1);\n\n      this.linkBox.onClick = function () {\n        window.open('mailto:hello@craftedbygc.com', '_blank');\n      };\n\n      this.add(this.linkBox);\n    }\n  }, {\n    key: \"createNextection\",\n    value: function createNextection() {\n      var string = \"<div><h1>Contact  Element.</h1>\\n                <span class=\\\"large\\\">Hello Sergey</span>\\n                <textarea> And this is a textarea</textarea></div>\";\n      var wrapper = document.createElement('div');\n      wrapper.innerHTML = string;\n      var div = wrapper.firstChild; // set some values on the div to style it, standard CSS\n\n      div.style.width = '375px';\n      div.style.height = '375px';\n      div.style.opacity = 1;\n      div.style['will-change'] = 'all';\n      div.style.transition = 'top 0.2s linear';\n      div.style.background = new Color[\"a\" /* Color */](Math.random() * 0xffffff).getStyle();\n      var object = new CSS3DObject(div);\n      object.position.set(0, -2000, 0);\n      this.add(object);\n    }\n  }]);\n\n  return Section;\n}(Group[\"a\" /* Group */]);\n\n\n// EXTERNAL MODULE: ./node_modules/konami/konami.js\nvar konami = __webpack_require__(\"P3Nu\");\nvar konami_default = /*#__PURE__*/__webpack_require__.n(konami);\n\n// CONCATENATED MODULE: ./src/js/components/DomTimeline.js\nfunction DomTimeline_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DomTimeline_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DomTimeline_createClass(Constructor, protoProps, staticProps) { if (protoProps) DomTimeline_defineProperties(Constructor.prototype, protoProps); if (staticProps) DomTimeline_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n //import Item from './Item'\n\n\n\n\n\nvar DomTimeline_Timeline =\n/*#__PURE__*/\nfunction () {\n  function Timeline() {\n    DomTimeline_classCallCheck(this, Timeline);\n\n    this.setConfig();\n    this.init();\n\n    if (!window.assets) {\n      this.loadAssets(); //this.createTimeline()\n\n      console.log('reload assets');\n    } else {\n      console.log('cached assets');\n      this.assets = window.assets;\n      this.createTimeline();\n    }\n  }\n\n  DomTimeline_createClass(Timeline, [{\n    key: \"setConfig\",\n    value: function setConfig() {\n      this.dom = {\n        cursor: document.querySelector('.cursor'),\n        compass: document.querySelector('.compass'),\n        compassSvg: document.querySelector('.compass svg'),\n        mainSvgs: document.querySelectorAll('main :not(.compass) svg'),\n        cursorSvgs: document.querySelectorAll('.cursor svg')\n      };\n      this.c = {\n        dpr: window.devicePixelRatio >= 2 ? 2 : 1,\n        startTime: Date.now(),\n        size: {\n          w: window.innerWidth,\n          h: window.innerHeight\n        },\n        scrollPos: 0,\n        scrolling: false,\n        allowScrolling: true,\n        autoMoveSpeed: 0,\n        isMobile: this.isMobile(),\n        holdingMouseDown: false,\n        touchEnabled: 'ontouchstart' in window\n      };\n      this.c.globalScale = Math.min(1, this.c.size.w / 1400);\n      if (this.c.touchEnabled) document.documentElement.classList.add('touch-enabled');else document.documentElement.classList.add('enable-cursor'); //Cut out assetOrder\n\n      this.assetList = []; //assetOrder\n\n      this.assetList.intro = ['ok.png'];\n      this.assetList.end = ['wave.mp4']; //this.assetData = assetData\n\n      this.timelineEntered = false;\n      this.activeMonth = 'intro';\n      this.months = {}; //months\n\n      this.monthPositions = {};\n      this.remainingMonths = [];\n      this.enableLoader = true;\n      this.gyroEnabled = false;\n      this.orientation = {\n        gamma: 0,\n        beta: 0\n      };\n      this.easterEgg = this.easterEgg.bind(this);\n      new konami_default.a(this.easterEgg);\n      this.easterEggEnabled = false;\n      if (!this.enableLoader) document.querySelector('.loading').style.display = 'none';\n      this.assets;\n    }\n  }, {\n    key: \"isMobile\",\n    value: function isMobile() {\n      var a = navigator.userAgent || navigator.vendor || window.opera;\n      return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4));\n    }\n  }, {\n    key: \"loadAssets\",\n    value: function loadAssets() {\n      var _this = this;\n\n      var assetLoader = new DomAssetLoader_AssetLoader(this.c.isMobile);\n\n      if (this.enableLoader) {\n        setTimeout(function () {\n          assetLoader.load(_this.assetList, _this.renderer).then(function (assets) {\n            _this.assets = assets;\n            console.log('ASSETS LOADED1'); // all assets loaded - initialise\n\n            _this.createTimeline();\n          });\n        }, 20);\n      } else {\n        assetLoader.load(this.assetList, this.renderer).then(function (assets) {\n          _this.assets = assets;\n          console.log('ASSETS LOADED2'); // all assets loaded - initialise\n\n          _this.createTimeline();\n        });\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      this.renderer = new CSS3DRenderer(); //THREE.WebGLRenderer({ antialias: true, alpha: true })\n      //this.renderer.setPixelRatio( this.c.dpr )\n\n      this.renderer.setSize(this.c.size.w, this.c.size.h);\n      document.body.appendChild(this.renderer.domElement);\n      this.preventPullToRefresh();\n      this.scene = new Scene[\"a\" /* Scene */]();\n      this.scene.background = new Color[\"a\" /* Color */](0xAEC7C3);\n      this.scene.fog = new Fog[\"a\" /* Fog */](0xAEC7C3, 1400, 2000);\n      this.scene.scale.set(this.c.globalScale, this.c.globalScale, 1);\n      var cameraPosition = 800;\n      var fov = 180 * (2 * Math.atan(this.c.size.h / 2 / cameraPosition)) / Math.PI;\n      this.camera = new PerspectiveCamera[\"a\" /* PerspectiveCamera */](fov, this.c.size.w / this.c.size.h, 1, 2000);\n      this.camera.position.set(0, this.enableLoader ? 2000 : 0, cameraPosition);\n      this.raycaster = new Raycaster[\"a\" /* Raycaster */]();\n      this.raycaster.near = this.camera.near;\n      this.raycaster.far = this.camera.far;\n      this.intersects = [];\n      this.linkIntersect = [];\n      this.whooshIntersects = [];\n      this.frustum = new Frustum[\"a\" /* Frustum */]();\n      this.cameraViewProjectionMatrix = new Matrix4[\"a\" /* Matrix4 */]();\n      this.mouse = new Vector2[\"a\" /* Vector2 */]();\n      this.mousePerspective = new Vector2[\"a\" /* Vector2 */]();\n      window.addEventListener('devicemotion', function (event) {\n        if (event.rotationRate.alpha || event.rotationRate.beta || event.rotationRate.gamma) {\n          _this2.gyroEnabled = true;\n        }\n      });\n    }\n  }, {\n    key: \"createTimeline\",\n    value: function createTimeline() {\n      this.timeline = new Group[\"a\" /* Group */]();\n      this.scene.add(this.timeline);\n      this.textMat = new MeshBasicMaterial[\"a\" /* MeshBasicMaterial */]({\n        color: 0x1b42d8,\n        transparent: true\n      });\n      this.captionTextMat = new MeshBasicMaterial[\"a\" /* MeshBasicMaterial */]({\n        color: 0x1b42d8,\n        transparent: true,\n        opacity: 0,\n        visible: false\n      });\n      this.linkUnderlineMat = new MeshBasicMaterial[\"a\" /* MeshBasicMaterial */]({\n        color: 0x1b42d8,\n        transparent: true,\n        opacity: 0,\n        visible: false\n      });\n      this.textOutlineMat = new MeshBasicMaterial[\"a\" /* MeshBasicMaterial */]({\n        color: 0x1b42d8,\n        transparent: true\n      });\n      this.contactTextMat = new MeshBasicMaterial[\"a\" /* MeshBasicMaterial */]({\n        color: 0xFFFFFF\n      });\n      this.sections = {};\n      this.items = {};\n      this.itemMeshes = []; // array for raycasting mouse\n\n      this.videoItems = [];\n      var itemIndexTotal = 0;\n      var nextMonthPos = 0;\n      var string = \"<div><h1>This is an H1 Element.</h1>\\n                <span class=\\\"large\\\">Hello Finsweet, we are on top of the game.</span>\\n                <textarea> And this is a textarea</textarea></div>\";\n      var pointMonth = -900;\n\n      for (var i = 0; i < 8; i++) {\n        var month = i;\n        if (i === 0) month = 'intro';else if (i === 6) month = 'dec';else if (i === 7) month = 'end';else month = 'mon' + String(month);\n        this.sections[month] = this.createCSS3DObject(string.replace('H1', month)); //this.section[ month ].position.set( 0, 0, 0 )\n        //cssElement.position.set(100, 100, 100 + 50 * i);\n\n        var bbox = new Box3[\"a\" /* Box3 */]().setFromObject(this.sections[month]);\n        this.sections[month].position.y = -10000 + pointMonth * (i + 1);\n        this.sections[month].position.z = nextMonthPos;\n        this.monthPositions[month] = nextMonthPos; // + 1100 ;\n\n        var posOffset = 800; // TODO: get from camera?\n\n        if (month === 'intro') posOffset = 1700;\n        if (month === 'dec') posOffset = 1800;\n        if (month === 'end') posOffset = 2700; //console.log((pointMonth+800) * (i+1) - posOffset)\n\n        nextMonthPos += (pointMonth + 800) * (i + 1) - posOffset; //nextMonthPos + 800 - posOffset\n\n        this.timeline.add(this.sections[month]);\n        if (month === 'end') this.stopScrollPos = this.sections[month].position.z;\n      }\n\n      this.videoCount = this.videoItems.length;\n      this.contactSection = new DomSection_Section({\n        timeline: timeline,\n        section: 'contact'\n      });\n      this.contactSection.visible = false;\n      this.scene.add(this.contactSection);\n      this.linkGroup = new Group[\"a\" /* Group */]();\n      var linkGeom = new TextGeometry[\"a\" /* TextGeometry */]('SEE MORE', {\n        font: this.assets.fonts['SuisseIntl-Bold'],\n        size: 6,\n        height: 0,\n        curveSegments: 4\n      }).center();\n      this.link = new Mesh[\"a\" /* Mesh */](linkGeom, this.captionTextMat);\n      this.linkUnderline = new Mesh[\"a\" /* Mesh */](new PlaneGeometry[\"a\" /* PlaneBufferGeometry */](45, 1), this.linkUnderlineMat);\n      this.linkUnderline.position.set(0, -10, 0); // for raycasting so it doesn't just pick up on letters\n\n      this.linkBox = new Mesh[\"a\" /* Mesh */](new PlaneGeometry[\"a\" /* PlaneBufferGeometry */](70, 20), new MeshBasicMaterial[\"a\" /* MeshBasicMaterial */]({\n        alphaTest: 0,\n        visible: false\n      }));\n      this.linkGroup.visible = false;\n      this.linkGroup.add(this.link);\n      this.linkGroup.add(this.linkUnderline);\n      this.linkGroup.add(this.linkBox);\n      this.scene.add(this.linkGroup);\n      console.log('RENDER');\n      this.animate();\n      this.initCursorListeners();\n      this.initListeners();\n      document.body.classList.add('ready');\n    }\n  }, {\n    key: \"createCSS3DObject\",\n    value: function createCSS3DObject(s) {\n      // convert the string to dome elements\n      var wrapper = document.createElement('div');\n      wrapper.innerHTML = s;\n      var div = wrapper.firstChild; // set some values on the div to style it, standard CSS\n      //div.style.width = '375px';\n      //div.style.height = '375px';\n\n      div.style.opacity = 1;\n      div.style['will-change'] = 'all';\n      div.style.transition = 'top 0.2s linear';\n      div.style.background = new Color[\"a\" /* Color */](Math.random() * 0xffffff).getStyle(); // create a CSS3Dobject and return it.\n\n      var object = new CSS3DObject(div);\n      return object;\n    }\n  }, {\n    key: \"moveToStart\",\n    value: function moveToStart() {\n      var _this3 = this;\n\n      gsap[\"a\" /* TweenMax */].to(this.camera.position, 2, {\n        y: 0,\n        ease: 'Expo.easeInOut',\n        onComplete: function onComplete() {\n          // Change the y to defualt 0, in other for the divs to become visible\n          var sectionKeys = Object.keys(_this3.sections);\n          sectionKeys.forEach(function (month) {\n            _this3.sections[month].position.y = 0;\n          });\n        }\n      });\n      gsap[\"a\" /* TweenMax */].to('.loading', 2, {\n        y: '-100%',\n        ease: 'Expo.easeInOut',\n        onComplete: function onComplete() {\n          document.querySelector('.loading').style.display = 'none';\n          _this3.timelineEntered = true;\n        }\n      });\n      gsap[\"a\" /* TweenMax */].to(['.say-hello', '.logo', '.social'], 2, {\n        y: 0,\n        delay: 1,\n        ease: 'Expo.easeInOut'\n      });\n      gsap[\"a\" /* TweenMax */].to(['.left', '.right'], 2, {\n        x: 0,\n        delay: 1,\n        ease: 'Expo.easeInOut'\n      });\n\n      if (this.gyroEnabled) {\n        gsap[\"a\" /* TweenMax */].to(this.dom.compass, 2, {\n          y: 0,\n          delay: 1,\n          ease: 'Expo.easeInOut'\n        });\n      }\n    }\n  }, {\n    key: \"openItem\",\n    value: function openItem(item) {\n      var _this4 = this;\n\n      this.itemAnimating = true;\n      this.itemOpen = item;\n      this.origTimelinePos = this.timeline.position.z;\n      this.c.allowScrolling = false;\n\n      if (this.c.isMobile) {\n        var texture = item.mesh.material.uniforms.texture.value;\n\n        if (texture.mediaType === 'video') {\n          texture.image.src = 'assets/' + texture.name;\n          texture.image.play();\n        }\n      }\n\n      var posOffset = this.sections[this.activeMonth].position.z;\n\n      if (item.month !== this.activeMonth) {\n        posOffset = this.sections[this.remainingMonths[this.remainingMonths.length - 2]].position.z;\n      }\n\n      gsap[\"a\" /* TweenMax */].to(item.position, 1.5, {\n        x: 0,\n        y: 0,\n        ease: 'Expo.easeInOut',\n        onComplete: function onComplete() {\n          _this4.itemAnimating = false;\n          _this4.dom.cursor.dataset.cursor = 'cross';\n        }\n      });\n      gsap[\"a\" /* TweenMax */].to(item.uniforms.progress, 1.5, {\n        value: 1,\n        ease: 'Expo.easeInOut'\n      });\n      gsap[\"a\" /* TweenMax */].to(this.timeline.position, 1.5, {\n        z: -(posOffset - -item.position.z) + (this.c.globalScale < 0.5 ? 450 : 300),\n        ease: 'Expo.easeInOut'\n      });\n      gsap[\"a\" /* TweenMax */].to(this.textMat, 1, {\n        opacity: 0,\n        ease: 'Expo.easeInOut',\n        onComplete: function onComplete() {\n          _this4.textMat.visible = false;\n        }\n      });\n      gsap[\"a\" /* TweenMax */].to(this.captionTextMat, 2, {\n        opacity: 1,\n        ease: 'Expo.easeInOut',\n        delay: 0.3,\n        onStart: function onStart() {\n          _this4.captionTextMat.visible = true;\n        }\n      });\n      gsap[\"a\" /* TweenMax */].to(this.linkUnderlineMat, 2, {\n        opacity: 0.4,\n        ease: 'Expo.easeInOut',\n        delay: 0.3,\n        onStart: function onStart() {\n          _this4.linkUnderlineMat.visible = true;\n        }\n      });\n\n      if (item.caption) {\n        gsap[\"a\" /* TweenMax */].fromTo(item.caption.position, 2, {\n          z: -100\n        }, {\n          z: 0,\n          delay: 0.2,\n          ease: 'Expo.easeInOut',\n          onStart: function onStart() {\n            item.caption.visible = true;\n          }\n        });\n      }\n\n      if (item.data.link) {\n        this.linkBox.onClick = function () {\n          window.open(item.data.link, '_blank');\n        };\n\n        this.linkGroup.position.y = item.caption ? item.caption.position.y - 40 : -item.mesh.scale.y / 2 - 50;\n        gsap[\"a\" /* TweenMax */].fromTo(this.linkGroup.position, 2, {\n          z: 0\n        }, {\n          z: this.c.globalScale < 0.5 ? 450 : 300,\n          delay: 0.3,\n          ease: 'Expo.easeInOut',\n          onStart: function onStart() {\n            _this4.linkGroup.visible = true;\n          }\n        });\n      }\n\n      var pos = new Vector2[\"a\" /* Vector2 */]();\n\n      for (var x in this.items) {\n        // TODO: see if can select just in camera range + a bit more for the timeline position\n        if (this.items[x].align === 0) pos.set(-700, 700); // bottom left\n\n        if (this.items[x].align === 1) pos.set(700, 700); // bottom right\n\n        if (this.items[x].align === 2) pos.set(700, -700); // top right\n\n        if (this.items[x].align === 3) pos.set(-700, -700); // top left\n\n        if (this.items[x] === item) continue;\n        gsap[\"a\" /* TweenMax */].to(this.items[x].material.uniforms.opacity, 1.3, {\n          value: 0,\n          ease: 'Expo.easeInOut'\n        });\n        gsap[\"a\" /* TweenMax */].to(this.items[x].position, 1.3, {\n          x: pos.x,\n          y: pos.y,\n          ease: 'Expo.easeInOut'\n        });\n      }\n    }\n  }, {\n    key: \"closeItem\",\n    value: function closeItem() {\n      var _this5 = this;\n\n      if (!this.itemAnimating && this.itemOpen) {\n        this.itemAnimating = true;\n        this.dom.cursor.dataset.cursor = 'pointer';\n\n        if (this.c.isMobile) {\n          var texture = this.itemOpen.mesh.material.uniforms.texture.value;\n\n          if (texture.mediaType === 'video') {\n            texture.image.pause();\n            texture.image.src = '';\n            texture.image.load();\n          }\n        }\n\n        gsap[\"a\" /* TweenMax */].to(this.itemOpen.position, 1.5, {\n          x: this.itemOpen.origPos.x,\n          y: this.itemOpen.origPos.y,\n          ease: 'Expo.easeInOut'\n        });\n        gsap[\"a\" /* TweenMax */].to(this.timeline.position, 1.5, {\n          z: this.origTimelinePos,\n          ease: 'Expo.easeInOut',\n          onComplete: function onComplete() {\n            _this5.c.allowScrolling = true;\n            _this5.itemOpen = false;\n            _this5.itemAnimating = false;\n          }\n        });\n        gsap[\"a\" /* TweenMax */].to(this.itemOpen.uniforms.progress, 1.5, {\n          value: 0,\n          ease: 'Expo.easeInOut'\n        });\n        gsap[\"a\" /* TweenMax */].to(this.textMat, 1.5, {\n          opacity: 1,\n          ease: 'Expo.easeInOut',\n          onStart: function onStart() {\n            _this5.textMat.visible = true;\n          }\n        });\n        gsap[\"a\" /* TweenMax */].to([this.captionTextMat, this.linkUnderlineMat], 0.4, {\n          opacity: 0,\n          ease: 'Expo.easeInOut',\n          onComplete: function onComplete() {\n            _this5.captionTextMat.visible = false;\n            _this5.linkUnderlineMat.visible = false;\n            if (_this5.itemOpen.caption) _this5.itemOpen.caption.visible = false;\n            _this5.linkGroup.visible = false;\n          }\n        });\n\n        for (var x in this.items) {\n          if (this.items[x].active) continue;\n          gsap[\"a\" /* TweenMax */].to(this.items[x].material.uniforms.opacity, 1.5, {\n            value: 1,\n            ease: 'Expo.easeInOut'\n          });\n          gsap[\"a\" /* TweenMax */].to(this.items[x].position, 1.5, {\n            x: this.items[x].origPos.x,\n            y: this.items[x].origPos.y,\n            ease: 'Expo.easeInOut'\n          });\n        }\n      }\n    }\n  }, {\n    key: \"openContact\",\n    value: function openContact(e) {\n      var _this6 = this;\n\n      e.preventDefault();\n      if (this.contactSection.isOpen) return this.closeContact();\n      this.dom.cursor.dataset.cursor = 'cross';\n      this.contactSection.visible = true;\n      this.contactSection.isOpen = true;\n      this.c.allowScrolling = false;\n      this.linkUnderlineMat.visible = true;\n      this.linkUnderlineMat.opacity = 0.3;\n      var newY = -500;\n      if (!this.c.isMobile) newY = -2000;\n      gsap[\"a\" /* TweenMax */].to(this.camera.position, 2, {\n        y: newY,\n        //this.contactSection.position.y * this.scene.scale.y,\n        ease: 'Expo.easeInOut',\n        onComplete: function onComplete() {\n          _this6.timeline.visible = false;\n          if (_this6.c.isMobile) _this6.contactSection.position.y = 0;\n        }\n      });\n    }\n  }, {\n    key: \"closeContact\",\n    value: function closeContact() {\n      var _this7 = this;\n\n      this.timeline.visible = true;\n      this.contactSection.isOpen = false; //this.contactSection.position.y = -2000\n\n      gsap[\"a\" /* TweenMax */].to(this.camera.position, 2, {\n        y: 0,\n        ease: 'Expo.easeInOut',\n        onComplete: function onComplete() {\n          _this7.contactSection.visible = false;\n          _this7.c.allowScrolling = true;\n          _this7.linkUnderlineMat.visible = false;\n          _this7.linkUnderlineMat.opacity = 0;\n        }\n      });\n    }\n  }, {\n    key: \"scroll\",\n    value: function scroll(e) {\n      var delta = normalizeWheelDelta(e);\n      this.c.scrollPos += -delta * 60;\n      this.c.scrolling = true;\n\n      function normalizeWheelDelta(e) {\n        if (e.detail && e.wheelDelta) return e.wheelDelta / e.detail / 40 * (e.detail > 0 ? 1 : -1); // Opera\n        else if (e.deltaY) return -e.deltaY / 60; // Firefox\n          else return e.wheelDelta / 120; // IE,Safari,Chrome\n      }\n    }\n  }, {\n    key: \"mouseDown\",\n    value: function mouseDown(e) {\n      var _this8 = this;\n\n      e.preventDefault();\n      e.stopPropagation();\n      if (this.easterEggEnabled) return;\n      this.c.holdingMouseDown = true;\n\n      if (this.contactSection.isOpen) {\n        if (this.linkIntersect.length > 0) {\n          if (this.linkIntersect[0].object.onClick) this.linkIntersect[0].object.onClick();\n        } else {\n          this.closeContact();\n        }\n      } else if (this.itemOpen) {\n        if (this.linkIntersect.length > 0) {\n          if (this.linkIntersect[0].object.onClick) this.linkIntersect[0].object.onClick();\n        } else {\n          this.closeItem();\n        }\n      } else {\n        if (this.intersects.length > 0) {\n          this.openItem(this.intersects[0].object.parent);\n          this.dom.cursor.dataset.cursor = 'cross';\n        } else if (this.hoveringWhoosh) {\n          this.c.scrolling = true;\n          gsap[\"a\" /* TweenMax */].to(this.c, 4, {\n            scrollPos: 0,\n            ease: 'Expo.easeInOut',\n            onUpdate: function onUpdate() {\n              _this8.c.scrolling = true;\n            }\n          });\n        } else {\n          this.dom.cursor.dataset.cursor = 'move';\n          gsap[\"a\" /* TweenMax */].to(this.c, 0.5, {\n            delay: 0.7,\n            autoMoveSpeed: 20\n          });\n        }\n      }\n    }\n  }, {\n    key: \"mouseUp\",\n    value: function mouseUp() {\n      if (!this.itemOpen) this.dom.cursor.dataset.cursor = 'pointer';\n      this.c.holdingMouseDown = false;\n      gsap[\"a\" /* TweenMax */].killTweensOf(this.c, {\n        autoMoveSpeed: true\n      });\n      this.c.autoMoveSpeed = 0;\n    }\n  }, {\n    key: \"mouseMove\",\n    value: function mouseMove(e) {\n      this.mousePerspective.x = e.clientX / window.innerWidth - 0.5;\n      this.mousePerspective.y = e.clientY / window.innerHeight - 0.5;\n      this.updatingPerspective = true;\n\n      if (!this.c.touchEnabled) {\n        gsap[\"a\" /* TweenMax */].to('.cursor', 1.5, {\n          x: e.clientX,\n          y: e.clientY,\n          ease: 'Power4.easeOut'\n        });\n      }\n\n      if (!this.renderer || e.target !== this.renderer.domElement || this.easterEggEnabled) return;\n      this.mouse.x = e.clientX / this.renderer.domElement.clientWidth * 2 - 1;\n      this.mouse.y = -(e.clientY / this.renderer.domElement.clientHeight) * 2 + 1;\n      this.raycaster.setFromCamera(this.mouse, this.camera); // raycast for items when in timeline mode\n\n      if (!this.contactSection.isOpen && !this.itemOpen && !this.c.holdingMouseDown) {\n        if (this.activeMonth === 'end') {\n          this.intersects = [];\n          this.whooshIntersects = this.raycaster.intersectObjects(this.sections['end'].whoosh.children);\n\n          if (this.whooshIntersects.length > 0) {\n            this.dom.cursor.dataset.cursor = 'none';\n            this.hoveringWhoosh = true;\n            this.sections['end'].arrowTween.timeScale(2);\n          } else if (this.hoveringWhoosh) {\n            this.dom.cursor.dataset.cursor = 'pointer';\n            this.hoveringWhoosh = false;\n            this.sections['end'].arrowTween.timeScale(1);\n          }\n        } else {\n          this.intersects = this.raycaster.intersectObjects(this.itemMeshes);\n\n          if (this.intersects.length > 0) {\n            this.dom.cursor.dataset.cursor = 'eye';\n          } else if (this.dom.cursor.dataset.cursor !== 'pointer') {\n            this.dom.cursor.dataset.cursor = 'pointer';\n          }\n        }\n      } // raycast for item link\n\n\n      if (!this.contactSection.isOpen && this.itemOpen && this.itemOpen.data.link) {\n        this.linkIntersect = this.raycaster.intersectObject(this.linkBox);\n\n        if (this.linkIntersect.length > 0) {\n          this.dom.cursor.dataset.cursor = 'eye';\n        } else if (this.dom.cursor.dataset.cursor !== 'cross') {\n          this.dom.cursor.dataset.cursor = 'cross';\n        }\n      }\n\n      if (this.contactSection.isOpen) {\n        //this.linkIntersect = this.raycaster.intersectObject( this.contactSection.linkBox )\n        if (this.linkIntersect.length > 0) {\n          this.dom.cursor.dataset.cursor = 'eye';\n        } else if (this.dom.cursor.dataset.cursor !== 'cross') {\n          this.dom.cursor.dataset.cursor = 'cross';\n        }\n      }\n    }\n  }, {\n    key: \"updatePerspective\",\n    value: function updatePerspective() {\n      gsap[\"a\" /* TweenMax */].to(this.camera.rotation, 4, {\n        x: -this.mousePerspective.y * 0.5,\n        y: -this.mousePerspective.x * 0.5,\n        ease: 'Power4.easeOut'\n      });\n\n      if (this.activeMonth === 'end') {\n        gsap[\"a\" /* TweenMax */].to(this.sections['end'].arrow.rotation, 4, {\n          x: -1.5 + this.mousePerspective.y * 0.2,\n          y: this.mousePerspective.x * 0.8,\n          ease: 'Power4.easeOut'\n        });\n      }\n\n      this.updatingPerspective = false;\n    }\n  }, {\n    key: \"updateOrientation\",\n    value: function updateOrientation(e) {\n      this.orientation.gamma = e.gamma ? e.gamma : 0;\n      this.orientation.beta = e.beta ? e.beta : 0;\n\n      if (!this.initialOrientation) {\n        this.initialOrientation = {\n          gamma: this.orientation.gamma,\n          beta: this.orientation.beta\n        };\n      }\n\n      gsap[\"a\" /* TweenMax */].to(this.camera.rotation, 2, {\n        x: this.orientation.beta ? (this.orientation.beta - this.initialOrientation.beta) * (Math.PI / 300) : 0,\n        y: this.orientation.gamma ? (this.orientation.gamma - this.initialOrientation.gamma) * (Math.PI / 300) : 0,\n        ease: 'Power4.easeOut'\n      });\n    }\n  }, {\n    key: \"resetOrientation\",\n    value: function resetOrientation(e) {\n      this.initialOrientation = {\n        gamma: this.orientation.gamma,\n        beta: this.orientation.beta\n      };\n    }\n  }, {\n    key: \"changeColours\",\n    value: function changeColours() {\n      var _this9 = this;\n\n      var override = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.remainingMonths = Object.keys(this.monthPositions).filter(function (key) {\n        return _this9.timeline.position.z > -_this9.monthPositions[key]; // TODO: look into detecting if exists in camera\n      });\n\n      if (override || this.remainingMonths[this.remainingMonths.length - 1] && this.activeMonth !== this.remainingMonths[this.remainingMonths.length - 1]) {\n        if (override) {\n          this.activeMonth = override;\n        } else {\n          this.activeMonth = this.remainingMonths[this.remainingMonths.length - 1];\n        }\n\n        var bgColor = new Color[\"a\" /* Color */](this.months[this.activeMonth].bgColor);\n        var textColor = new Color[\"a\" /* Color */](this.months[this.activeMonth].textColor);\n        var tintColor = new Color[\"a\" /* Color */](this.months[this.activeMonth].tintColor);\n        var interfaceColor;\n        gsap[\"a\" /* TweenMax */].to([this.scene.fog.color, this.scene.background], 1, {\n          r: bgColor.r,\n          g: bgColor.g,\n          b: bgColor.b,\n          ease: 'Power4.easeOut'\n        });\n        gsap[\"a\" /* TweenMax */].to(this.textMat.color, 1, {\n          r: textColor.r,\n          g: textColor.g,\n          b: textColor.b,\n          ease: 'Power4.easeOut'\n        });\n        gsap[\"a\" /* TweenMax */].set([this.captionTextMat.color, this.linkUnderlineMat.color], {\n          r: textColor.r,\n          g: textColor.g,\n          b: textColor.b\n        });\n\n        for (var id in this.items) {\n          gsap[\"a\" /* TweenMax */].to(this.items[id].uniforms.gradientColor.value, 1, {\n            r: tintColor.r,\n            g: tintColor.g,\n            b: tintColor.b,\n            ease: 'Power4.easeOut'\n          });\n        }\n\n        if (this.months[this.activeMonth].outlineTextColor) {\n          var outlineTextColor = new Color[\"a\" /* Color */](this.months[this.activeMonth].outlineTextColor);\n          interfaceColor = outlineTextColor.getHexString();\n          gsap[\"a\" /* TweenMax */].to([this.textOutlineMat.color], 1, {\n            r: outlineTextColor.r,\n            g: outlineTextColor.g,\n            b: outlineTextColor.b,\n            ease: 'Power4.easeOut'\n          });\n        } else {\n          interfaceColor = textColor.getHexString();\n        }\n\n        if (this.months[this.activeMonth].contactColor) this.contactTextMat.color.set(this.months[this.activeMonth].contactColor);else this.contactTextMat.color.set(0xFFFFFF);\n        gsap[\"a\" /* TweenMax */].to(this.dom.mainSvgs, 1, {\n          fill: \"#\".concat(interfaceColor),\n          ease: 'Power4.easeOut'\n        });\n        gsap[\"a\" /* TweenMax */].to([this.dom.cursorSvgs, this.dom.compassSvg], 1, {\n          stroke: \"#\".concat(interfaceColor),\n          ease: 'Power4.easeOut'\n        });\n        gsap[\"a\" /* TweenMax */].to('.say-hello .underline', 1, {\n          borderBottomColor: \"#\".concat(interfaceColor),\n          ease: 'Power4.easeOut'\n        });\n        document.querySelector(\"meta[name=theme-color]\").setAttribute(\"content\", '#' + bgColor.getHexString());\n\n        if (this.activeMonth === 'end' && !this.sections['end'].arrowTween) {\n          this.sections['end'].arrowTween = gsap[\"a\" /* TweenMax */].to(this.sections['end'].arrow.position, 1, {\n            z: 0,\n            repeat: -1,\n            yoyo: true,\n            ease: 'Power2.easeInOut'\n          });\n        } else if (this.sections['end'].arrowTween) {\n          this.sections['end'].arrowTween = false;\n        }\n      }\n    }\n  }, {\n    key: \"handleVideos\",\n    value: function handleVideos() {\n      this.camera.updateMatrixWorld();\n      this.camera.matrixWorldInverse.getInverse(this.camera.matrixWorld);\n      this.cameraViewProjectionMatrix.multiplyMatrices(this.camera.projectionMatrix, this.camera.matrixWorldInverse);\n      this.frustum.setFromMatrix(this.cameraViewProjectionMatrix);\n\n      for (var i = 0; i < this.videoCount; i++) {\n        if (this.frustum.intersectsObject(this.videoItems[i]) && this.videoItems[i].material.uniforms.texture.value.image.paused) {\n          this.videoItems[i].material.uniforms.texture.value.image.play();\n          continue;\n        }\n\n        if (!this.frustum.intersectsObject(this.videoItems[i]) && !this.videoItems[i].material.uniforms.texture.value.image.paused) {\n          this.videoItems[i].material.uniforms.texture.value.image.pause();\n        }\n      }\n    }\n  }, {\n    key: \"animate\",\n    value: function animate() {\n      this.animationId = requestAnimationFrame(this.animate.bind(this));\n\n      if (!this.c.touchEnabled && this.updatingPerspective) {\n        this.updatePerspective();\n        this.updatingPerspective = false;\n      }\n\n      if (this.c.autoMoveSpeed > 0) {\n        this.c.scrolling = true;\n        this.c.scrollPos += this.c.autoMoveSpeed;\n      } // smooth scrolling\n\n\n      if (this.c.allowScrolling && this.c.scrolling) {\n        if (this.c.scrollPos <= 0) this.c.scrollPos = 0;\n        if (this.c.scrollPos >= -this.stopScrollPos) this.c.scrollPos = -this.stopScrollPos;\n        var delta = (this.c.scrollPos - this.timeline.position.z) / 12;\n        this.timeline.position.z += delta; //if( !this.c.isMobile && Math.abs( delta ) < 8 ) this.handleVideos()\n        //if( !this.easterEggEnabled ) this.changeColours()\n\n        /* if( this.timeline.position.z < 700 ) {\r\n            TweenMax.set( this.sections['intro'].rotation, {\r\n                z: '+=' + delta * 0.005\r\n            })\r\n        } */\n\n        if (Math.abs(delta) > 0.1) {\n          this.c.scrolling = true;\n        } else {\n          this.c.scrolling = false;\n        }\n      }\n\n      if (this.hoveringWhoosh) {\n        this.sections['end'].rotation.z += 0.005;\n      }\n\n      this.renderer.render(this.scene, this.camera);\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      this.c.size = {\n        w: window.innerWidth,\n        h: window.innerHeight\n      };\n      this.camera.fov = 180 * (2 * Math.atan(this.c.size.h / 2 / this.camera.position.z)) / Math.PI;\n      this.camera.aspect = this.c.size.w / this.c.size.h;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(this.c.size.w, this.c.size.h);\n    }\n  }, {\n    key: \"eyeCursorElEnter\",\n    value: function eyeCursorElEnter() {\n      this.dom.cursor.dataset.cursor = 'eye';\n    }\n  }, {\n    key: \"eyeCursorElLeave\",\n    value: function eyeCursorElLeave() {\n      this.dom.cursor.dataset.cursor = 'pointer';\n    }\n  }, {\n    key: \"initListeners\",\n    value: function initListeners() {\n      var _this10 = this;\n\n      this.resize = this.resize.bind(this);\n      this.scroll = this.scroll.bind(this);\n      this.mouseDown = this.mouseDown.bind(this);\n      this.mouseUp = this.mouseUp.bind(this);\n      this.openContact = this.openContact.bind(this);\n      this.moveToStart = this.moveToStart.bind(this);\n      window.addEventListener('resize', this.resize, false);\n      this.renderer.domElement.addEventListener('mousedown', this.mouseDown, false);\n      this.renderer.domElement.addEventListener('mouseup', this.mouseUp, false);\n      this.renderer.domElement.addEventListener('wheel', this.scroll, false);\n\n      if (this.gyroEnabled) {\n        this.updateOrientation = this.updateOrientation.bind(this);\n        this.resetOrientation = this.resetOrientation.bind(this);\n        window.addEventListener('deviceorientation', this.updateOrientation);\n        this.dom.compass.addEventListener('click', this.resetOrientation, false);\n      }\n\n      document.querySelector('.say-hello').addEventListener('click', this.openContact, false);\n      if (this.enableLoader) document.querySelector('.enter').addEventListener('click', this.moveToStart, false);\n      this.gesture = new TinyGesture(this.renderer.domElement, {\n        mouseSupport: false\n      });\n      this.gesture.on('panmove', function (e) {\n        _this10.c.scrollPos += -_this10.gesture.velocityY * 6;\n        _this10.c.scrolling = true;\n      });\n      this.gesture.on('panend', function (e) {\n        return _this10.c.autoMoveSpeed = 0;\n      });\n      this.gesture.on('longpress', function (e) {\n        return _this10.c.autoMoveSpeed = 10;\n      });\n\n      if (!this.c.touchEnabled) {\n        this.dom.cursor.dataset.cursor = 'pointer';\n      }\n    }\n  }, {\n    key: \"initCursorListeners\",\n    value: function initCursorListeners() {\n      this.eyeCursorElEnter = this.eyeCursorElEnter.bind(this);\n      this.eyeCursorElLeave = this.eyeCursorElLeave.bind(this);\n      this.mouseMove = this.mouseMove.bind(this);\n      window.addEventListener('mousemove', this.mouseMove, false);\n      var eyeCursorEls = document.querySelectorAll('.cursor-eye');\n\n      for (var i = 0; i < eyeCursorEls.length; i++) {\n        eyeCursorEls[i].addEventListener('mouseenter', this.eyeCursorElEnter, false);\n        eyeCursorEls[i].addEventListener('mouseleave', this.eyeCursorElLeave, false);\n      }\n    }\n  }, {\n    key: \"preventPullToRefresh\",\n    value: function preventPullToRefresh() {\n      var prevent = false;\n      this.renderer.domElement.addEventListener('touchstart', function (e) {\n        if (e.touches.length !== 1) {\n          return;\n        }\n\n        var scrollY = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;\n        prevent = scrollY === 0;\n      });\n      this.renderer.domElement.addEventListener('touchmove', function (e) {\n        if (prevent) {\n          prevent = false;\n          e.preventDefault();\n        }\n      });\n    }\n  }, {\n    key: \"easterEgg\",\n    value: function easterEgg() {\n      if (!this.timelineEntered) return;\n      console.log('CHEATER!');\n      this.easterEggEnabled = true;\n      gsap[\"a\" /* TweenMax */].to(this.timeline.rotation, 2, {\n        z: 360 * Math.PI / 180,\n        ease: 'Power4.easeInOut'\n      });\n      this.discoColours();\n\n      for (var i = 0; i < this.itemMeshes.length - 1; i++) {\n        gsap[\"a\" /* TweenMax */].to(this.itemMeshes[i].rotation, 2, {\n          z: 360 * Math.PI / 180,\n          ease: 'Linear.easeNone',\n          repeat: -1\n        });\n      }\n\n      gsap[\"a\" /* TweenMax */].to(this.sections['intro'].children[2].rotation, 2, {\n        z: 360 * Math.PI / 180,\n        ease: 'Linear.easeNone',\n        repeat: -1\n      });\n\n      for (var id in this.sections) {\n        gsap[\"a\" /* TweenMax */].to(this.sections[id].children[0].position, 1, {\n          z: 150,\n          repeat: -1,\n          yoyo: true,\n          ease: 'Linear.easeNone'\n        });\n      }\n    }\n  }, {\n    key: \"discoColours\",\n    value: function discoColours() {\n      var _this11 = this;\n\n      var _loop = function _loop(id) {\n        gsap[\"a\" /* TweenMax */].to(_this11.items[id].uniforms.gradientColor.value, 1, {\n          r: 0.9882352941,\n          g: 0.2941176471,\n          b: 0.05882352941,\n          ease: 'Power4.easeOut',\n          onComplete: function onComplete() {\n            gsap[\"a\" /* TweenMax */].to(_this11.items[id].uniforms.gradientColor.value, 1, {\n              r: 0.9882352941,\n              g: 0.05882352941,\n              b: 0.7529411765,\n              ease: 'Power4.easeOut',\n              onComplete: function onComplete() {\n                gsap[\"a\" /* TweenMax */].to(_this11.items[id].uniforms.gradientColor.value, 1, {\n                  r: 0.05882352941,\n                  g: 0.7529411765,\n                  b: 0.9882352941,\n                  ease: 'Power4.easeOut',\n                  onComplete: function onComplete() {\n                    gsap[\"a\" /* TweenMax */].to(_this11.items[id].uniforms.gradientColor.value, 1, {\n                      r: 0.05882352941,\n                      g: 0.9882352941,\n                      b: 0.2941176471,\n                      ease: 'Power4.easeOut'\n                    });\n                  }\n                });\n              }\n            });\n          }\n        });\n      };\n\n      // rgb(15,252,75)\n      // rgb(15,192,252)\n      // rgb(252,15,192)\n      // rgb(252,75,15)\n      for (var id in this.items) {\n        _loop(id);\n      }\n\n      gsap[\"a\" /* TweenMax */].to(this.textMat.color, 1, {\n        r: 0.9882352941,\n        g: 0.2941176471,\n        b: 0.05882352941,\n        ease: 'Power4.easeOut',\n        onComplete: function onComplete() {\n          gsap[\"a\" /* TweenMax */].to(_this11.textMat.color, 1, {\n            r: 0.9882352941,\n            g: 0.05882352941,\n            b: 0.7529411765,\n            ease: 'Power4.easeOut',\n            onComplete: function onComplete() {\n              gsap[\"a\" /* TweenMax */].to(_this11.textMat.color, 1, {\n                r: 0.05882352941,\n                g: 0.7529411765,\n                b: 0.9882352941,\n                ease: 'Power4.easeOut',\n                onComplete: function onComplete() {\n                  gsap[\"a\" /* TweenMax */].to(_this11.textMat.color, 1, {\n                    r: 0.05882352941,\n                    g: 0.9882352941,\n                    b: 0.2941176471,\n                    ease: 'Power4.easeOut'\n                  });\n                }\n              });\n            }\n          });\n        }\n      });\n      gsap[\"a\" /* TweenMax */].to([this.scene.fog.color, this.scene.background], 1, {\n        r: 0.05882352941,\n        g: 0.9882352941,\n        b: 0.2941176471,\n        ease: 'Power4.easeOut',\n        onComplete: function onComplete() {\n          gsap[\"a\" /* TweenMax */].to([_this11.scene.fog.color, _this11.scene.background], 1, {\n            r: 0.05882352941,\n            g: 0.7529411765,\n            b: 0.9882352941,\n            ease: 'Power4.easeOut',\n            onComplete: function onComplete() {\n              gsap[\"a\" /* TweenMax */].to([_this11.scene.fog.color, _this11.scene.background], 1, {\n                r: 0.9882352941,\n                g: 0.05882352941,\n                b: 0.7529411765,\n                ease: 'Power4.easeOut',\n                onComplete: function onComplete() {\n                  gsap[\"a\" /* TweenMax */].to([_this11.scene.fog.color, _this11.scene.background], 1, {\n                    r: 0.9882352941,\n                    g: 0.2941176471,\n                    b: 0.05882352941,\n                    ease: 'Power4.easeOut',\n                    onComplete: function onComplete() {\n                      _this11.discoColours();\n                    }\n                  });\n                }\n              });\n            }\n          });\n        }\n      });\n    }\n  }]);\n\n  return Timeline;\n}();\n\n\n// CONCATENATED MODULE: ./src/js/main.js\n //import Timeline from './components/Timeline'\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Initial HMR Setup\n  if (true) {\n    module.hot.accept();\n    module.hot.dispose(function () {\n      window.assets = timeline.assets;\n      timeline.renderer.domElement.removeEventListener('wheel', timeline.scroll);\n      removeEventListener('resize', timeline.resize);\n      timeline.renderer.domElement.removeEventListener('mousedown', timeline.mouseDown);\n      timeline.renderer.domElement.removeEventListener('mouseup', timeline.mouseUp);\n      removeEventListener('mousemove', timeline.mouseMove);\n      document.querySelector('canvas').remove();\n      timeline.renderer.forceContextLoss();\n      timeline.renderer.context = null;\n      timeline.renderer.domElement = null;\n      timeline.renderer = null;\n      cancelAnimationFrame(timeline.animationId);\n      timeline.gesture.destroy();\n    });\n  }\n\n  var timeline = new DomTimeline_Timeline();\n  window.timeline = timeline;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///kpGR\n")},tgXZ:function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = function escape(url, needQuotes) {\n  if (typeof url !== 'string') {\n    return url;\n  } // If url is already wrapped in quotes, remove them\n\n\n  if (/^['\"].*['\"]$/.test(url)) {\n    url = url.slice(1, -1);\n  } // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n\n\n  if (/[\"'() \\t\\n]/.test(url) || needQuotes) {\n    return '\"' + url.replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n') + '\"';\n  }\n\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGdYWi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS91cmwtZXNjYXBlLmpzP2I2MDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXNjYXBlKHVybCwgbmVlZFF1b3Rlcykge1xuICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dLy50ZXN0KHVybCkgfHwgbmVlZFF1b3Rlcykge1xuICAgIHJldHVybiAnXCInICsgdXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJykgKyAnXCInO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///tgXZ\n")},x3HC:function(module,exports){eval("module.exports = \"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nuniform float time;\\nuniform vec3 fogColor;\\nuniform float fogNear;\\nuniform float fogFar;\\nuniform sampler2D texture;\\n\\nvoid main() {\\n\\n\\tvec2 uv = vUv;\\n\\t// vec4 color = texture2D( texture, vUv );\\n\\n\\tvec4 origColor = texture2D(texture, vUv);\\n\\n\\t// remove green\\n\\tif ( origColor.r < 0.4 && origColor.b < 0.4 && origColor.g > 0.4 ) {\\n\\t\\torigColor.a = 0.;\\n\\t}\\n\\n\\tif ( origColor.r < 0.9 && origColor.b < 0.9 && origColor.g > 0.9 ) {\\n\\t\\torigColor.a = 0.;\\n\\t}\\n\\n\\t// vec4 gradientImage = mix(vec4( gradientColor, 1.0), vec4(1.0, 1.0, 1.0, 1.0), grayscaleValue);\\n\\n\\t// if ( gradientImage.b < 0.9 ) discard;\\n\\n\\t// gl_FragColor = origColor * opacity;\\n\\tgl_FragColor = origColor;\\n\\n\\t#ifdef USE_FOG\\n\\t\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t\\t#endif\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n\\t#endif\\n\\n}\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieDNIQy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9qcy9zaGFkZXJzL2dyZWVuc2NyZWVuLmZyYWc/ZDY3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiI2RlZmluZSBHTFNMSUZZIDFcXG52YXJ5aW5nIHZlYzIgdlV2O1xcblxcbnVuaWZvcm0gZmxvYXQgdGltZTtcXG51bmlmb3JtIHZlYzMgZm9nQ29sb3I7XFxudW5pZm9ybSBmbG9hdCBmb2dOZWFyO1xcbnVuaWZvcm0gZmxvYXQgZm9nRmFyO1xcbnVuaWZvcm0gc2FtcGxlcjJEIHRleHR1cmU7XFxuXFxudm9pZCBtYWluKCkge1xcblxcblxcdHZlYzIgdXYgPSB2VXY7XFxuXFx0Ly8gdmVjNCBjb2xvciA9IHRleHR1cmUyRCggdGV4dHVyZSwgdlV2ICk7XFxuXFxuXFx0dmVjNCBvcmlnQ29sb3IgPSB0ZXh0dXJlMkQodGV4dHVyZSwgdlV2KTtcXG5cXG5cXHQvLyByZW1vdmUgZ3JlZW5cXG5cXHRpZiAoIG9yaWdDb2xvci5yIDwgMC40ICYmIG9yaWdDb2xvci5iIDwgMC40ICYmIG9yaWdDb2xvci5nID4gMC40ICkge1xcblxcdFxcdG9yaWdDb2xvci5hID0gMC47XFxuXFx0fVxcblxcblxcdGlmICggb3JpZ0NvbG9yLnIgPCAwLjkgJiYgb3JpZ0NvbG9yLmIgPCAwLjkgJiYgb3JpZ0NvbG9yLmcgPiAwLjkgKSB7XFxuXFx0XFx0b3JpZ0NvbG9yLmEgPSAwLjtcXG5cXHR9XFxuXFxuXFx0Ly8gdmVjNCBncmFkaWVudEltYWdlID0gbWl4KHZlYzQoIGdyYWRpZW50Q29sb3IsIDEuMCksIHZlYzQoMS4wLCAxLjAsIDEuMCwgMS4wKSwgZ3JheXNjYWxlVmFsdWUpO1xcblxcblxcdC8vIGlmICggZ3JhZGllbnRJbWFnZS5iIDwgMC45ICkgZGlzY2FyZDtcXG5cXG5cXHQvLyBnbF9GcmFnQ29sb3IgPSBvcmlnQ29sb3IgKiBvcGFjaXR5O1xcblxcdGdsX0ZyYWdDb2xvciA9IG9yaWdDb2xvcjtcXG5cXG5cXHQjaWZkZWYgVVNFX0ZPR1xcblxcdFxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFx0XFx0XFx0ZmxvYXQgZGVwdGggPSBnbF9GcmFnRGVwdGhFWFQgLyBnbF9GcmFnQ29vcmQudztcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdGZsb2F0IGRlcHRoID0gZ2xfRnJhZ0Nvb3JkLnogLyBnbF9GcmFnQ29vcmQudztcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRmbG9hdCBmb2dGYWN0b3IgPSBzbW9vdGhzdGVwKCBmb2dOZWFyLCBmb2dGYXIsIGRlcHRoICk7XFxuXFx0XFx0Z2xfRnJhZ0NvbG9yLnJnYiA9IG1peCggZ2xfRnJhZ0NvbG9yLnJnYiwgZm9nQ29sb3IsIGZvZ0ZhY3RvciApO1xcblxcdCNlbmRpZlxcblxcbn1cIiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///x3HC\n")},yLpj:function(module,exports){eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieUxwai5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///yLpj\n")}},[[0,3,2,1]]]);